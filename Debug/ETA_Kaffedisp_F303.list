
ETA_Kaffedisp_F303.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000377c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003904  08003904  00013904  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800395c  0800395c  0001395c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003960  08003960  00013960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000408  20000000  08003964  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020408  2**0
                  CONTENTS
  7 .bss          000002e0  20000408  20000408  00020408  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006e8  200006e8  00020408  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020408  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001bf50  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003506  00000000  00000000  0003c388  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009966  00000000  00000000  0003f88e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000c18  00000000  00000000  000491f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001140  00000000  00000000  00049e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001a942  00000000  00000000  0004af50  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000c68b  00000000  00000000  00065892  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00090c36  00000000  00000000  00071f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000ec  00000000  00000000  00102b53  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000243c  00000000  00000000  00102c40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000408 	.word	0x20000408
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038ec 	.word	0x080038ec

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000040c 	.word	0x2000040c
 80001c4:	080038ec 	.word	0x080038ec

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__aeabi_d2f>:
 800095c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000960:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000964:	bf24      	itt	cs
 8000966:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800096a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800096e:	d90d      	bls.n	800098c <__aeabi_d2f+0x30>
 8000970:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000974:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000978:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800097c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000980:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000984:	bf08      	it	eq
 8000986:	f020 0001 	biceq.w	r0, r0, #1
 800098a:	4770      	bx	lr
 800098c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000990:	d121      	bne.n	80009d6 <__aeabi_d2f+0x7a>
 8000992:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000996:	bfbc      	itt	lt
 8000998:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800099c:	4770      	bxlt	lr
 800099e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009a6:	f1c2 0218 	rsb	r2, r2, #24
 80009aa:	f1c2 0c20 	rsb	ip, r2, #32
 80009ae:	fa10 f30c 	lsls.w	r3, r0, ip
 80009b2:	fa20 f002 	lsr.w	r0, r0, r2
 80009b6:	bf18      	it	ne
 80009b8:	f040 0001 	orrne.w	r0, r0, #1
 80009bc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009c4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009c8:	ea40 000c 	orr.w	r0, r0, ip
 80009cc:	fa23 f302 	lsr.w	r3, r3, r2
 80009d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009d4:	e7cc      	b.n	8000970 <__aeabi_d2f+0x14>
 80009d6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009da:	d107      	bne.n	80009ec <__aeabi_d2f+0x90>
 80009dc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e0:	bf1e      	ittt	ne
 80009e2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009e6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ea:	4770      	bxne	lr
 80009ec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009f4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop

080009fc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009fc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fe:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <HAL_InitTick+0x3c>)
 8000a00:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_InitTick+0x40>)
{
 8000a02:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a04:	7818      	ldrb	r0, [r3, #0]
 8000a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0a:	fbb3 f3f0 	udiv	r3, r3, r0
 8000a0e:	6810      	ldr	r0, [r2, #0]
 8000a10:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a14:	f000 fb3c 	bl	8001090 <HAL_SYSTICK_Config>
 8000a18:	4604      	mov	r4, r0
 8000a1a:	b958      	cbnz	r0, 8000a34 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1c:	2d0f      	cmp	r5, #15
 8000a1e:	d809      	bhi.n	8000a34 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a20:	4602      	mov	r2, r0
 8000a22:	4629      	mov	r1, r5
 8000a24:	f04f 30ff 	mov.w	r0, #4294967295
 8000a28:	f000 faf2 	bl	8001010 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a2c:	4b04      	ldr	r3, [pc, #16]	; (8000a40 <HAL_InitTick+0x44>)
 8000a2e:	4620      	mov	r0, r4
 8000a30:	601d      	str	r5, [r3, #0]
 8000a32:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000a34:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000a36:	bd38      	pop	{r3, r4, r5, pc}
 8000a38:	20000404 	.word	0x20000404
 8000a3c:	20000000 	.word	0x20000000
 8000a40:	20000004 	.word	0x20000004

08000a44 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_Init+0x20>)
{
 8000a46:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	6813      	ldr	r3, [r2, #0]
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 facb 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a56:	2000      	movs	r0, #0
 8000a58:	f7ff ffd0 	bl	80009fc <HAL_InitTick>
  HAL_MspInit();
 8000a5c:	f002 fce4 	bl	8003428 <HAL_MspInit>
}
 8000a60:	2000      	movs	r0, #0
 8000a62:	bd08      	pop	{r3, pc}
 8000a64:	40022000 	.word	0x40022000

08000a68 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a68:	4a03      	ldr	r2, [pc, #12]	; (8000a78 <HAL_IncTick+0x10>)
 8000a6a:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <HAL_IncTick+0x14>)
 8000a6c:	6811      	ldr	r1, [r2, #0]
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	440b      	add	r3, r1
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000424 	.word	0x20000424
 8000a7c:	20000000 	.word	0x20000000

08000a80 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000a80:	4b01      	ldr	r3, [pc, #4]	; (8000a88 <HAL_GetTick+0x8>)
 8000a82:	6818      	ldr	r0, [r3, #0]
}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000424 	.word	0x20000424

08000a8c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000a8c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000a8e:	6803      	ldr	r3, [r0, #0]
{
 8000a90:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000a92:	6898      	ldr	r0, [r3, #8]
 8000a94:	f000 0003 	and.w	r0, r0, #3
 8000a98:	2801      	cmp	r0, #1
 8000a9a:	d001      	beq.n	8000aa0 <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a9c:	2000      	movs	r0, #0
 8000a9e:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	07d2      	lsls	r2, r2, #31
 8000aa4:	d5fa      	bpl.n	8000a9c <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000aa6:	689a      	ldr	r2, [r3, #8]
 8000aa8:	f002 020d 	and.w	r2, r2, #13
 8000aac:	2a01      	cmp	r2, #1
 8000aae:	d11b      	bne.n	8000ae8 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 8000ab0:	689a      	ldr	r2, [r3, #8]
 8000ab2:	f042 0202 	orr.w	r2, r2, #2
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	2203      	movs	r2, #3
 8000aba:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000abc:	f7ff ffe0 	bl	8000a80 <HAL_GetTick>
 8000ac0:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000ac2:	6823      	ldr	r3, [r4, #0]
 8000ac4:	689b      	ldr	r3, [r3, #8]
 8000ac6:	07db      	lsls	r3, r3, #31
 8000ac8:	d5e8      	bpl.n	8000a9c <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000aca:	f7ff ffd9 	bl	8000a80 <HAL_GetTick>
 8000ace:	1b40      	subs	r0, r0, r5
 8000ad0:	2802      	cmp	r0, #2
 8000ad2:	d9f6      	bls.n	8000ac2 <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ad4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000ad6:	f043 0310 	orr.w	r3, r3, #16
 8000ada:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000adc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ae8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000af0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000af8:	bd38      	pop	{r3, r4, r5, pc}
	...

08000afc <HAL_ADC_Init>:
{
 8000afc:	b570      	push	{r4, r5, r6, lr}
 8000afe:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 8000b04:	4604      	mov	r4, r0
 8000b06:	2800      	cmp	r0, #0
 8000b08:	f000 80e3 	beq.w	8000cd2 <HAL_ADC_Init+0x1d6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000b0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000b0e:	06d5      	lsls	r5, r2, #27
 8000b10:	f100 80cc 	bmi.w	8000cac <HAL_ADC_Init+0x1b0>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000b14:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	f000 8092 	beq.w	8000c40 <HAL_ADC_Init+0x144>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b1c:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	689a      	ldr	r2, [r3, #8]
 8000b22:	00d2      	lsls	r2, r2, #3
 8000b24:	d502      	bpl.n	8000b2c <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000b26:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	d50a      	bpl.n	8000b42 <HAL_ADC_Init+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8000b2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b2e:	f023 0312 	bic.w	r3, r3, #18
 8000b32:	f043 0310 	orr.w	r3, r3, #16
 8000b36:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b38:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000b3a:	f043 0301 	orr.w	r3, r3, #1
 8000b3e:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 8000b40:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000b44:	06de      	lsls	r6, r3, #27
 8000b46:	f100 80be 	bmi.w	8000cc6 <HAL_ADC_Init+0x1ca>
 8000b4a:	2800      	cmp	r0, #0
 8000b4c:	f040 80bb 	bne.w	8000cc6 <HAL_ADC_Init+0x1ca>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000b50:	6823      	ldr	r3, [r4, #0]
 8000b52:	6899      	ldr	r1, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8000b54:	f011 0104 	ands.w	r1, r1, #4
 8000b58:	f040 80b5 	bne.w	8000cc6 <HAL_ADC_Init+0x1ca>
    ADC_STATE_CLR_SET(hadc->State,
 8000b5c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000b5e:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000b62:	f042 0202 	orr.w	r2, r2, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 8000b6a:	6462      	str	r2, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b6c:	bf0c      	ite	eq
 8000b6e:	4a5a      	ldreq	r2, [pc, #360]	; (8000cd8 <HAL_ADC_Init+0x1dc>)
 8000b70:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8000b74:	9201      	str	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b76:	689a      	ldr	r2, [r3, #8]
 8000b78:	f002 0203 	and.w	r2, r2, #3
 8000b7c:	2a01      	cmp	r2, #1
 8000b7e:	d102      	bne.n	8000b86 <HAL_ADC_Init+0x8a>
 8000b80:	681a      	ldr	r2, [r3, #0]
 8000b82:	07d5      	lsls	r5, r2, #31
 8000b84:	d410      	bmi.n	8000ba8 <HAL_ADC_Init+0xac>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b86:	9a01      	ldr	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b88:	b13a      	cbz	r2, 8000b9a <HAL_ADC_Init+0x9e>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b8a:	6895      	ldr	r5, [r2, #8]
 8000b8c:	f005 0503 	and.w	r5, r5, #3
 8000b90:	2d01      	cmp	r5, #1
 8000b92:	d102      	bne.n	8000b9a <HAL_ADC_Init+0x9e>
 8000b94:	6812      	ldr	r2, [r2, #0]
 8000b96:	07d2      	lsls	r2, r2, #31
 8000b98:	d406      	bmi.n	8000ba8 <HAL_ADC_Init+0xac>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b9a:	4d50      	ldr	r5, [pc, #320]	; (8000cdc <HAL_ADC_Init+0x1e0>)
 8000b9c:	6866      	ldr	r6, [r4, #4]
 8000b9e:	68aa      	ldr	r2, [r5, #8]
 8000ba0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000ba4:	4332      	orrs	r2, r6
 8000ba6:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000ba8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000baa:	68a6      	ldr	r6, [r4, #8]
 8000bac:	69e5      	ldr	r5, [r4, #28]
 8000bae:	2a01      	cmp	r2, #1
 8000bb0:	68e2      	ldr	r2, [r4, #12]
 8000bb2:	ea42 0206 	orr.w	r2, r2, r6
 8000bb6:	bf18      	it	ne
 8000bb8:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 8000bbc:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8000bc0:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bc2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000bc4:	2901      	cmp	r1, #1
 8000bc6:	d107      	bne.n	8000bd8 <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bc8:	2d00      	cmp	r5, #0
 8000bca:	d171      	bne.n	8000cb0 <HAL_ADC_Init+0x1b4>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000bcc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000bce:	3901      	subs	r1, #1
 8000bd0:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8000bd4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000bd8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000bda:	2901      	cmp	r1, #1
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000bdc:	bf1e      	ittt	ne
 8000bde:	6b25      	ldrne	r5, [r4, #48]	; 0x30
 8000be0:	4329      	orrne	r1, r5
 8000be2:	430a      	orrne	r2, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000be4:	6899      	ldr	r1, [r3, #8]
 8000be6:	f011 0f0c 	tst.w	r1, #12
 8000bea:	d10b      	bne.n	8000c04 <HAL_ADC_Init+0x108>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000bec:	68d9      	ldr	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000bee:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000bf0:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000bf4:	f021 0102 	bic.w	r1, r1, #2
 8000bf8:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bfc:	0049      	lsls	r1, r1, #1
 8000bfe:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 8000c02:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8000c04:	68dd      	ldr	r5, [r3, #12]
 8000c06:	4936      	ldr	r1, [pc, #216]	; (8000ce0 <HAL_ADC_Init+0x1e4>)
 8000c08:	4029      	ands	r1, r5
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	60da      	str	r2, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c0e:	6922      	ldr	r2, [r4, #16]
 8000c10:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c12:	bf05      	ittet	eq
 8000c14:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 8000c16:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c18:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c1a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8000c1e:	bf06      	itte	eq
 8000c20:	f021 010f 	biceq.w	r1, r1, #15
 8000c24:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c26:	f022 020f 	bicne.w	r2, r2, #15
 8000c2a:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 8000c30:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c32:	f023 0303 	bic.w	r3, r3, #3
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6463      	str	r3, [r4, #68]	; 0x44
}
 8000c3c:	b016      	add	sp, #88	; 0x58
 8000c3e:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8000c40:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c42:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c44:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 8000c46:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 8000c4a:	f002 fc33 	bl	80034b4 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	00d8      	lsls	r0, r3, #3
 8000c54:	f53f af62 	bmi.w	8000b1c <HAL_ADC_Init+0x20>
        tmp_hal_status = ADC_Disable(hadc);
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f7ff ff17 	bl	8000a8c <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c5e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000c60:	06d1      	lsls	r1, r2, #27
 8000c62:	f53f af5c 	bmi.w	8000b1e <HAL_ADC_Init+0x22>
 8000c66:	2800      	cmp	r0, #0
 8000c68:	f47f af59 	bne.w	8000b1e <HAL_ADC_Init+0x22>
          ADC_STATE_CLR_SET(hadc->State,
 8000c6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c72:	f023 0302 	bic.w	r3, r3, #2
 8000c76:	f043 0302 	orr.w	r3, r3, #2
 8000c7a:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c7c:	6823      	ldr	r3, [r4, #0]
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c84:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c86:	689a      	ldr	r2, [r3, #8]
 8000c88:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c8c:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <HAL_ADC_Init+0x1e8>)
 8000c90:	4a15      	ldr	r2, [pc, #84]	; (8000ce8 <HAL_ADC_Init+0x1ec>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	fbb3 f2f2 	udiv	r2, r3, r2
 8000c98:	230a      	movs	r3, #10
 8000c9a:	4353      	muls	r3, r2
            wait_loop_index--;
 8000c9c:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8000c9e:	9b00      	ldr	r3, [sp, #0]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	f43f af3b 	beq.w	8000b1c <HAL_ADC_Init+0x20>
            wait_loop_index--;
 8000ca6:	9b00      	ldr	r3, [sp, #0]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	e7f7      	b.n	8000c9c <HAL_ADC_Init+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cac:	4618      	mov	r0, r3
 8000cae:	e748      	b.n	8000b42 <HAL_ADC_Init+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 8000cb0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000cb2:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8000cb6:	f041 0120 	orr.w	r1, r1, #32
 8000cba:	6461      	str	r1, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cbc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000cbe:	f041 0101 	orr.w	r1, r1, #1
 8000cc2:	64a1      	str	r1, [r4, #72]	; 0x48
 8000cc4:	e788      	b.n	8000bd8 <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 8000cc6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000cc8:	f023 0312 	bic.w	r3, r3, #18
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	e7b2      	b.n	8000c3c <HAL_ADC_Init+0x140>
 8000cd6:	bf00      	nop
 8000cd8:	50000100 	.word	0x50000100
 8000cdc:	50000300 	.word	0x50000300
 8000ce0:	fff0c007 	.word	0xfff0c007
 8000ce4:	20000404 	.word	0x20000404
 8000ce8:	000f4240 	.word	0x000f4240

08000cec <HAL_ADC_ConfigChannel>:
{
 8000cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cee:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 8000cf4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000cf8:	2b01      	cmp	r3, #1
{
 8000cfa:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8000cfc:	f000 8151 	beq.w	8000fa2 <HAL_ADC_ConfigChannel+0x2b6>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d00:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000d02:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d04:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 8000d06:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d08:	0754      	lsls	r4, r2, #29
  __HAL_LOCK(hadc);
 8000d0a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000d0e:	f100 8143 	bmi.w	8000f98 <HAL_ADC_ConfigChannel+0x2ac>
    if (sConfig->Rank < 5U)
 8000d12:	6848      	ldr	r0, [r1, #4]
 8000d14:	680c      	ldr	r4, [r1, #0]
 8000d16:	2804      	cmp	r0, #4
 8000d18:	f04f 0206 	mov.w	r2, #6
 8000d1c:	d831      	bhi.n	8000d82 <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 8000d1e:	4342      	muls	r2, r0
 8000d20:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 8000d22:	201f      	movs	r0, #31
 8000d24:	4090      	lsls	r0, r2
 8000d26:	ea27 0000 	bic.w	r0, r7, r0
 8000d2a:	fa04 f202 	lsl.w	r2, r4, r2
 8000d2e:	4302      	orrs	r2, r0
 8000d30:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	f012 0f0c 	tst.w	r2, #12
 8000d38:	d162      	bne.n	8000e00 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d3a:	2c09      	cmp	r4, #9
 8000d3c:	ea4f 0244 	mov.w	r2, r4, lsl #1
 8000d40:	688f      	ldr	r7, [r1, #8]
 8000d42:	d946      	bls.n	8000dd2 <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000d44:	4422      	add	r2, r4
 8000d46:	6998      	ldr	r0, [r3, #24]
 8000d48:	3a1e      	subs	r2, #30
 8000d4a:	f04f 0e07 	mov.w	lr, #7
 8000d4e:	fa0e fe02 	lsl.w	lr, lr, r2
 8000d52:	ea20 000e 	bic.w	r0, r0, lr
 8000d56:	fa07 f202 	lsl.w	r2, r7, r2
 8000d5a:	4302      	orrs	r2, r0
 8000d5c:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000d5e:	68da      	ldr	r2, [r3, #12]
 8000d60:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 8000d64:	694a      	ldr	r2, [r1, #20]
 8000d66:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8000d6a:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 8000d6e:	690a      	ldr	r2, [r1, #16]
 8000d70:	3a01      	subs	r2, #1
 8000d72:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 8000d76:	2a03      	cmp	r2, #3
 8000d78:	d873      	bhi.n	8000e62 <HAL_ADC_ConfigChannel+0x176>
 8000d7a:	e8df f002 	tbb	[pc, r2]
 8000d7e:	5137      	.short	0x5137
 8000d80:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 8000d82:	2809      	cmp	r0, #9
 8000d84:	d80b      	bhi.n	8000d9e <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 8000d86:	4342      	muls	r2, r0
 8000d88:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8000d8a:	3a1e      	subs	r2, #30
 8000d8c:	201f      	movs	r0, #31
 8000d8e:	4090      	lsls	r0, r2
 8000d90:	ea27 0000 	bic.w	r0, r7, r0
 8000d94:	fa04 f202 	lsl.w	r2, r4, r2
 8000d98:	4302      	orrs	r2, r0
 8000d9a:	635a      	str	r2, [r3, #52]	; 0x34
 8000d9c:	e7c9      	b.n	8000d32 <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 8000d9e:	280e      	cmp	r0, #14
 8000da0:	d80b      	bhi.n	8000dba <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000da2:	4342      	muls	r2, r0
 8000da4:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8000da6:	3a3c      	subs	r2, #60	; 0x3c
 8000da8:	201f      	movs	r0, #31
 8000daa:	4090      	lsls	r0, r2
 8000dac:	ea27 0000 	bic.w	r0, r7, r0
 8000db0:	fa04 f202 	lsl.w	r2, r4, r2
 8000db4:	4302      	orrs	r2, r0
 8000db6:	639a      	str	r2, [r3, #56]	; 0x38
 8000db8:	e7bb      	b.n	8000d32 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000dba:	4342      	muls	r2, r0
 8000dbc:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8000dbe:	3a5a      	subs	r2, #90	; 0x5a
 8000dc0:	201f      	movs	r0, #31
 8000dc2:	4090      	lsls	r0, r2
 8000dc4:	ea27 0000 	bic.w	r0, r7, r0
 8000dc8:	fa04 f202 	lsl.w	r2, r4, r2
 8000dcc:	4302      	orrs	r2, r0
 8000dce:	63da      	str	r2, [r3, #60]	; 0x3c
 8000dd0:	e7af      	b.n	8000d32 <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000dd2:	6958      	ldr	r0, [r3, #20]
 8000dd4:	4422      	add	r2, r4
 8000dd6:	f04f 0e07 	mov.w	lr, #7
 8000dda:	fa0e fe02 	lsl.w	lr, lr, r2
 8000dde:	ea20 000e 	bic.w	r0, r0, lr
 8000de2:	fa07 f202 	lsl.w	r2, r7, r2
 8000de6:	4302      	orrs	r2, r0
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	e7b8      	b.n	8000d5e <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000dec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000dee:	4f7a      	ldr	r7, [pc, #488]	; (8000fd8 <HAL_ADC_ConfigChannel+0x2ec>)
 8000df0:	4017      	ands	r7, r2
 8000df2:	ea47 020c 	orr.w	r2, r7, ip
 8000df6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000dfa:	ea42 020e 	orr.w	r2, r2, lr
 8000dfe:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	f002 0203 	and.w	r2, r2, #3
 8000e06:	2a01      	cmp	r2, #1
 8000e08:	f040 80cd 	bne.w	8000fa6 <HAL_ADC_ConfigChannel+0x2ba>
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	07d0      	lsls	r0, r2, #31
 8000e10:	f140 80c9 	bpl.w	8000fa6 <HAL_ADC_ConfigChannel+0x2ba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e14:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8000e16:	2300      	movs	r3, #0
 8000e18:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 8000e1c:	b017      	add	sp, #92	; 0x5c
 8000e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000e20:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000e22:	4f6d      	ldr	r7, [pc, #436]	; (8000fd8 <HAL_ADC_ConfigChannel+0x2ec>)
 8000e24:	4017      	ands	r7, r2
 8000e26:	ea47 020c 	orr.w	r2, r7, ip
 8000e2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e2e:	ea42 020e 	orr.w	r2, r2, lr
 8000e32:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8000e34:	e7e4      	b.n	8000e00 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000e36:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000e38:	4867      	ldr	r0, [pc, #412]	; (8000fd8 <HAL_ADC_ConfigChannel+0x2ec>)
 8000e3a:	4010      	ands	r0, r2
 8000e3c:	ea40 020c 	orr.w	r2, r0, ip
 8000e40:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e44:	ea42 020e 	orr.w	r2, r2, lr
 8000e48:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8000e4a:	e7d9      	b.n	8000e00 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000e4c:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000e4e:	4a62      	ldr	r2, [pc, #392]	; (8000fd8 <HAL_ADC_ConfigChannel+0x2ec>)
 8000e50:	4002      	ands	r2, r0
 8000e52:	ea42 020c 	orr.w	r2, r2, ip
 8000e56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e5a:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000e5e:	66da      	str	r2, [r3, #108]	; 0x6c
 8000e60:	e7ce      	b.n	8000e00 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e64:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000e68:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000e6a:	bf02      	ittt	eq
 8000e6c:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8000e6e:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000e72:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000e76:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000e7a:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000e7c:	bf02      	ittt	eq
 8000e7e:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8000e80:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000e84:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e86:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000e88:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000e8c:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000e8e:	bf02      	ittt	eq
 8000e90:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8000e92:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000e96:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000e98:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000e9a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000e9e:	4594      	cmp	ip, r2
 8000ea0:	d1ae      	bne.n	8000e00 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000ea2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000ea4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000ea8:	e7d9      	b.n	8000e5e <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000eaa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000eae:	2101      	movs	r1, #1
 8000eb0:	40a1      	lsls	r1, r4
 8000eb2:	ea22 0201 	bic.w	r2, r2, r1
 8000eb6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000eba:	2c10      	cmp	r4, #16
 8000ebc:	d143      	bne.n	8000f46 <HAL_ADC_ConfigChannel+0x25a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000ebe:	4a47      	ldr	r2, [pc, #284]	; (8000fdc <HAL_ADC_ConfigChannel+0x2f0>)
 8000ec0:	6892      	ldr	r2, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000ec2:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000ec6:	d1a5      	bne.n	8000e14 <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ec8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ecc:	bf0c      	ite	eq
 8000ece:	4a44      	ldreq	r2, [pc, #272]	; (8000fe0 <HAL_ADC_ConfigChannel+0x2f4>)
 8000ed0:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8000ed4:	9201      	str	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	f002 0203 	and.w	r2, r2, #3
 8000edc:	2a01      	cmp	r2, #1
 8000ede:	d102      	bne.n	8000ee6 <HAL_ADC_ConfigChannel+0x1fa>
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	07d1      	lsls	r1, r2, #31
 8000ee4:	d452      	bmi.n	8000f8c <HAL_ADC_ConfigChannel+0x2a0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ee6:	9a01      	ldr	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000ee8:	b13a      	cbz	r2, 8000efa <HAL_ADC_ConfigChannel+0x20e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000eea:	6891      	ldr	r1, [r2, #8]
 8000eec:	f001 0103 	and.w	r1, r1, #3
 8000ef0:	2901      	cmp	r1, #1
 8000ef2:	d102      	bne.n	8000efa <HAL_ADC_ConfigChannel+0x20e>
 8000ef4:	6812      	ldr	r2, [r2, #0]
 8000ef6:	07d2      	lsls	r2, r2, #31
 8000ef8:	d448      	bmi.n	8000f8c <HAL_ADC_ConfigChannel+0x2a0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000efa:	2c10      	cmp	r4, #16
 8000efc:	d132      	bne.n	8000f64 <HAL_ADC_ConfigChannel+0x278>
 8000efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f02:	d187      	bne.n	8000e14 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000f04:	4a35      	ldr	r2, [pc, #212]	; (8000fdc <HAL_ADC_ConfigChannel+0x2f0>)
 8000f06:	6893      	ldr	r3, [r2, #8]
 8000f08:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f0c:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f0e:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <HAL_ADC_ConfigChannel+0x2f8>)
 8000f10:	4a35      	ldr	r2, [pc, #212]	; (8000fe8 <HAL_ADC_ConfigChannel+0x2fc>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	fbb3 f2f2 	udiv	r2, r3, r2
 8000f18:	230a      	movs	r3, #10
 8000f1a:	4353      	muls	r3, r2
            wait_loop_index--;
 8000f1c:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8000f1e:	9b00      	ldr	r3, [sp, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f43f af77 	beq.w	8000e14 <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 8000f26:	9b00      	ldr	r3, [sp, #0]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	e7f7      	b.n	8000f1c <HAL_ADC_ConfigChannel+0x230>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000f2c:	1c60      	adds	r0, r4, #1
 8000f2e:	6959      	ldr	r1, [r3, #20]
 8000f30:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000f34:	2207      	movs	r2, #7
 8000f36:	4082      	lsls	r2, r0
 8000f38:	ea21 0102 	bic.w	r1, r1, r2
 8000f3c:	fa06 f200 	lsl.w	r2, r6, r0
 8000f40:	430a      	orrs	r2, r1
 8000f42:	615a      	str	r2, [r3, #20]
 8000f44:	e7b9      	b.n	8000eba <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000f46:	2c11      	cmp	r4, #17
 8000f48:	d104      	bne.n	8000f54 <HAL_ADC_ConfigChannel+0x268>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000f4a:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <HAL_ADC_ConfigChannel+0x2f0>)
 8000f4c:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000f4e:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8000f52:	e7b8      	b.n	8000ec6 <HAL_ADC_ConfigChannel+0x1da>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000f54:	2c12      	cmp	r4, #18
 8000f56:	f47f af5d 	bne.w	8000e14 <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000f5a:	4a20      	ldr	r2, [pc, #128]	; (8000fdc <HAL_ADC_ConfigChannel+0x2f0>)
 8000f5c:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000f5e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8000f62:	e7b0      	b.n	8000ec6 <HAL_ADC_ConfigChannel+0x1da>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000f64:	2c11      	cmp	r4, #17
 8000f66:	d109      	bne.n	8000f7c <HAL_ADC_ConfigChannel+0x290>
 8000f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f6c:	f47f af52 	bne.w	8000e14 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000f70:	4a1a      	ldr	r2, [pc, #104]	; (8000fdc <HAL_ADC_ConfigChannel+0x2f0>)
 8000f72:	6893      	ldr	r3, [r2, #8]
 8000f74:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000f78:	6093      	str	r3, [r2, #8]
 8000f7a:	e74b      	b.n	8000e14 <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000f7c:	2c12      	cmp	r4, #18
 8000f7e:	f47f af49 	bne.w	8000e14 <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000f82:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <HAL_ADC_ConfigChannel+0x2f0>)
 8000f84:	6893      	ldr	r3, [r2, #8]
 8000f86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f8a:	e7f5      	b.n	8000f78 <HAL_ADC_ConfigChannel+0x28c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f8c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000f8e:	f043 0320 	orr.w	r3, r3, #32
 8000f92:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8000f94:	2001      	movs	r0, #1
 8000f96:	e73e      	b.n	8000e16 <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f98:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000f9a:	f043 0320 	orr.w	r3, r3, #32
 8000f9e:	646b      	str	r3, [r5, #68]	; 0x44
 8000fa0:	e739      	b.n	8000e16 <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	e73a      	b.n	8000e1c <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000fa6:	2e01      	cmp	r6, #1
 8000fa8:	f47f af7f 	bne.w	8000eaa <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000fac:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000fb0:	40a6      	lsls	r6, r4
 8000fb2:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fb4:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000fb6:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 8000fba:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000fbc:	d9b6      	bls.n	8000f2c <HAL_ADC_ConfigChannel+0x240>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000fbe:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000fc2:	6999      	ldr	r1, [r3, #24]
 8000fc4:	3a1b      	subs	r2, #27
 8000fc6:	2007      	movs	r0, #7
 8000fc8:	4090      	lsls	r0, r2
 8000fca:	ea21 0100 	bic.w	r1, r1, r0
 8000fce:	fa06 f202 	lsl.w	r2, r6, r2
 8000fd2:	430a      	orrs	r2, r1
 8000fd4:	619a      	str	r2, [r3, #24]
 8000fd6:	e770      	b.n	8000eba <HAL_ADC_ConfigChannel+0x1ce>
 8000fd8:	83fff000 	.word	0x83fff000
 8000fdc:	50000300 	.word	0x50000300
 8000fe0:	50000100 	.word	0x50000100
 8000fe4:	20000404 	.word	0x20000404
 8000fe8:	000f4240 	.word	0x000f4240

08000fec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fec:	4a07      	ldr	r2, [pc, #28]	; (800100c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000fee:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ff0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ff4:	041b      	lsls	r3, r3, #16
 8000ff6:	0c1b      	lsrs	r3, r3, #16
 8000ff8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000ffc:	0200      	lsls	r0, r0, #8
 8000ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001002:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001006:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001008:	60d3      	str	r3, [r2, #12]
 800100a:	4770      	bx	lr
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001012:	b530      	push	{r4, r5, lr}
 8001014:	68dc      	ldr	r4, [r3, #12]
 8001016:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	2b04      	cmp	r3, #4
 8001022:	bf28      	it	cs
 8001024:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001026:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	f04f 0501 	mov.w	r5, #1
 800102c:	fa05 f303 	lsl.w	r3, r5, r3
 8001030:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001034:	bf8c      	ite	hi
 8001036:	3c03      	subhi	r4, #3
 8001038:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103a:	4019      	ands	r1, r3
 800103c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800103e:	fa05 f404 	lsl.w	r4, r5, r4
 8001042:	3c01      	subs	r4, #1
 8001044:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8001046:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	ea42 0201 	orr.w	r2, r2, r1
 800104c:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	bfaf      	iteee	ge
 8001052:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001056:	f000 000f 	andlt.w	r0, r0, #15
 800105a:	4b06      	ldrlt	r3, [pc, #24]	; (8001074 <HAL_NVIC_SetPriority+0x64>)
 800105c:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105e:	bfa5      	ittet	ge
 8001060:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001064:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001066:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800106c:	bd30      	pop	{r4, r5, pc}
 800106e:	bf00      	nop
 8001070:	e000ed00 	.word	0xe000ed00
 8001074:	e000ed14 	.word	0xe000ed14

08001078 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001078:	0942      	lsrs	r2, r0, #5
 800107a:	2301      	movs	r3, #1
 800107c:	f000 001f 	and.w	r0, r0, #31
 8001080:	fa03 f000 	lsl.w	r0, r3, r0
 8001084:	4b01      	ldr	r3, [pc, #4]	; (800108c <HAL_NVIC_EnableIRQ+0x14>)
 8001086:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100

08001090 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	3801      	subs	r0, #1
 8001092:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001096:	d20a      	bcs.n	80010ae <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001098:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109a:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	21f0      	movs	r1, #240	; 0xf0
 80010a0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a6:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010a8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80010bc:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010be:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80010c0:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010c2:	bf0c      	ite	eq
 80010c4:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010c8:	f022 0204 	bicne.w	r2, r2, #4
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	4770      	bx	lr
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010d4:	4770      	bx	lr

080010d6 <HAL_SYSTICK_IRQHandler>:
{
 80010d6:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80010d8:	f7ff fffc 	bl	80010d4 <HAL_SYSTICK_Callback>
 80010dc:	bd08      	pop	{r3, pc}
	...

080010e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80010e0:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80010e2:	b350      	cbz	r0, 800113a <HAL_DMA_Init+0x5a>
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80010e4:	6884      	ldr	r4, [r0, #8]
 80010e6:	6843      	ldr	r3, [r0, #4]
  tmp = hdma->Instance->CCR;
 80010e8:	6801      	ldr	r1, [r0, #0]
  tmp |=  hdma->Init.Direction        |
 80010ea:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010ec:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 80010ee:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010f0:	4323      	orrs	r3, r4
 80010f2:	6904      	ldr	r4, [r0, #16]
 80010f4:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010f6:	6944      	ldr	r4, [r0, #20]
 80010f8:	4323      	orrs	r3, r4
 80010fa:	6984      	ldr	r4, [r0, #24]
 80010fc:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 80010fe:	69c4      	ldr	r4, [r0, #28]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001100:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001104:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.Mode                | hdma->Init.Priority;
 8001108:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 800110a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800110c:	600b      	str	r3, [r1, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <HAL_DMA_Init+0x60>)
 8001110:	2214      	movs	r2, #20
 8001112:	440b      	add	r3, r1
 8001114:	fbb3 f3f2 	udiv	r3, r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_DMA_Init+0x64>)
 800111e:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 8001120:	2201      	movs	r2, #1
  hdma->XferCpltCallback = NULL;
 8001122:	2300      	movs	r3, #0
 8001124:	6283      	str	r3, [r0, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 8001126:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 8001128:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 800112a:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800112c:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 800112e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001132:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 8001136:	4618      	mov	r0, r3
 8001138:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800113a:	2001      	movs	r0, #1
}  
 800113c:	bd10      	pop	{r4, pc}
 800113e:	bf00      	nop
 8001140:	bffdfff8 	.word	0xbffdfff8
 8001144:	40020000 	.word	0x40020000

08001148 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001148:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 800114c:	2a02      	cmp	r2, #2
{  
 800114e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001150:	d003      	beq.n	800115a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001152:	2204      	movs	r2, #4
 8001154:	6382      	str	r2, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001156:	2001      	movs	r0, #1
 8001158:	bd10      	pop	{r4, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800115a:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800115c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800115e:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 8001160:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001162:	f021 010e 	bic.w	r1, r1, #14
 8001166:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001168:	6811      	ldr	r1, [r2, #0]
 800116a:	f021 0101 	bic.w	r1, r1, #1
 800116e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001170:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001172:	2101      	movs	r1, #1
 8001174:	fa01 f202 	lsl.w	r2, r1, r2
 8001178:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800117a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800117c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001180:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001184:	b113      	cbz	r3, 800118c <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 8001186:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001188:	4620      	mov	r0, r4
 800118a:	bd10      	pop	{r4, pc}
 800118c:	4618      	mov	r0, r3
}
 800118e:	bd10      	pop	{r4, pc}

08001190 <HAL_DMA_IRQHandler>:
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001190:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001192:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8001194:	6803      	ldr	r3, [r0, #0]
{
 8001196:	b470      	push	{r4, r5, r6}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001198:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800119a:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800119c:	2404      	movs	r4, #4
 800119e:	4094      	lsls	r4, r2
 80011a0:	4226      	tst	r6, r4
 80011a2:	d00e      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x32>
 80011a4:	f015 0f04 	tst.w	r5, #4
 80011a8:	d00b      	beq.n	80011c2 <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	0692      	lsls	r2, r2, #26
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80011ae:	bf5e      	ittt	pl
 80011b0:	681a      	ldrpl	r2, [r3, #0]
 80011b2:	f022 0204 	bicpl.w	r2, r2, #4
 80011b6:	601a      	strpl	r2, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 80011b8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80011ba:	604c      	str	r4, [r1, #4]
    if(hdma->XferErrorCallback != NULL)
 80011bc:	b373      	cbz	r3, 800121c <HAL_DMA_IRQHandler+0x8c>
}  
 80011be:	bc70      	pop	{r4, r5, r6}
    	hdma->XferErrorCallback(hdma);
 80011c0:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80011c2:	2402      	movs	r4, #2
 80011c4:	4094      	lsls	r4, r2
 80011c6:	4226      	tst	r6, r4
 80011c8:	d012      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x60>
 80011ca:	f015 0f02 	tst.w	r5, #2
 80011ce:	d00f      	beq.n	80011f0 <HAL_DMA_IRQHandler+0x60>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	0695      	lsls	r5, r2, #26
 80011d4:	d406      	bmi.n	80011e4 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	f022 020a 	bic.w	r2, r2, #10
 80011dc:	601a      	str	r2, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80011de:	2301      	movs	r3, #1
 80011e0:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	__HAL_UNLOCK(hdma);
 80011e4:	2300      	movs	r3, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80011e6:	604c      	str	r4, [r1, #4]
  	__HAL_UNLOCK(hdma);
 80011e8:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80011ec:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80011ee:	e7e5      	b.n	80011bc <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80011f0:	2408      	movs	r4, #8
 80011f2:	4094      	lsls	r4, r2
 80011f4:	4234      	tst	r4, r6
 80011f6:	d011      	beq.n	800121c <HAL_DMA_IRQHandler+0x8c>
 80011f8:	072c      	lsls	r4, r5, #28
 80011fa:	d50f      	bpl.n	800121c <HAL_DMA_IRQHandler+0x8c>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011fc:	681c      	ldr	r4, [r3, #0]
 80011fe:	f024 040e 	bic.w	r4, r4, #14
 8001202:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001204:	2301      	movs	r3, #1
 8001206:	fa03 f202 	lsl.w	r2, r3, r2
 800120a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800120c:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 800120e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001212:	2300      	movs	r3, #0
 8001214:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001218:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800121a:	e7cf      	b.n	80011bc <HAL_DMA_IRQHandler+0x2c>
}  
 800121c:	bc70      	pop	{r4, r5, r6}
 800121e:	4770      	bx	lr

08001220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001224:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001226:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001228:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8001390 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800122c:	4a56      	ldr	r2, [pc, #344]	; (8001388 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800122e:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001230:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8001234:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001236:	9c01      	ldr	r4, [sp, #4]
 8001238:	40dc      	lsrs	r4, r3
 800123a:	d102      	bne.n	8001242 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 800123c:	b005      	add	sp, #20
 800123e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001242:	2401      	movs	r4, #1
 8001244:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8001248:	9c01      	ldr	r4, [sp, #4]
 800124a:	ea14 050a 	ands.w	r5, r4, sl
 800124e:	f000 8093 	beq.w	8001378 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001252:	684c      	ldr	r4, [r1, #4]
 8001254:	f024 0b10 	bic.w	fp, r4, #16
 8001258:	f1bb 0f02 	cmp.w	fp, #2
 800125c:	d111      	bne.n	8001282 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800125e:	08df      	lsrs	r7, r3, #3
 8001260:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001264:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001268:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800126a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800126e:	fa09 fc0e 	lsl.w	ip, r9, lr
 8001272:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001276:	690e      	ldr	r6, [r1, #16]
 8001278:	fa06 f60e 	lsl.w	r6, r6, lr
 800127c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8001280:	623e      	str	r6, [r7, #32]
 8001282:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001286:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8001288:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800128a:	fa07 f70c 	lsl.w	r7, r7, ip
 800128e:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001290:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001294:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001296:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800129a:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800129e:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a2:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80012a6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012a8:	d811      	bhi.n	80012ce <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80012aa:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ac:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b0:	68ce      	ldr	r6, [r1, #12]
 80012b2:	fa06 fe0c 	lsl.w	lr, r6, ip
 80012b6:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80012ba:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80012bc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012be:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80012c2:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80012c6:	409e      	lsls	r6, r3
 80012c8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80012cc:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80012ce:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012d0:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d2:	688e      	ldr	r6, [r1, #8]
 80012d4:	fa06 f60c 	lsl.w	r6, r6, ip
 80012d8:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012da:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80012dc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012de:	d54b      	bpl.n	8001378 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e0:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80012e4:	f046 0601 	orr.w	r6, r6, #1
 80012e8:	f8c8 6018 	str.w	r6, [r8, #24]
 80012ec:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80012f0:	f023 0703 	bic.w	r7, r3, #3
 80012f4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80012f8:	f006 0601 	and.w	r6, r6, #1
 80012fc:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001300:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001302:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8001308:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800130a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800130e:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001312:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001316:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800131a:	d02f      	beq.n	800137c <HAL_GPIO_Init+0x15c>
 800131c:	4e1b      	ldr	r6, [pc, #108]	; (800138c <HAL_GPIO_Init+0x16c>)
 800131e:	42b0      	cmp	r0, r6
 8001320:	d02e      	beq.n	8001380 <HAL_GPIO_Init+0x160>
 8001322:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001326:	42b0      	cmp	r0, r6
 8001328:	d02c      	beq.n	8001384 <HAL_GPIO_Init+0x164>
 800132a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800132e:	42b0      	cmp	r0, r6
 8001330:	bf14      	ite	ne
 8001332:	2605      	movne	r6, #5
 8001334:	2603      	moveq	r6, #3
 8001336:	fa06 f60e 	lsl.w	r6, r6, lr
 800133a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800133e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8001340:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001342:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001344:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8001348:	bf0c      	ite	eq
 800134a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800134c:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 800134e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8001350:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001352:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001356:	bf0c      	ite	eq
 8001358:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800135a:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 800135c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800135e:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001360:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001364:	bf0c      	ite	eq
 8001366:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001368:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 800136a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 800136c:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800136e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001370:	bf54      	ite	pl
 8001372:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001374:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8001376:	60d6      	str	r6, [r2, #12]
    position++;
 8001378:	3301      	adds	r3, #1
 800137a:	e75c      	b.n	8001236 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800137c:	2600      	movs	r6, #0
 800137e:	e7da      	b.n	8001336 <HAL_GPIO_Init+0x116>
 8001380:	2601      	movs	r6, #1
 8001382:	e7d8      	b.n	8001336 <HAL_GPIO_Init+0x116>
 8001384:	2602      	movs	r6, #2
 8001386:	e7d6      	b.n	8001336 <HAL_GPIO_Init+0x116>
 8001388:	40010400 	.word	0x40010400
 800138c:	48000400 	.word	0x48000400
 8001390:	40021000 	.word	0x40021000

08001394 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001394:	b10a      	cbz	r2, 800139a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001396:	6181      	str	r1, [r0, #24]
 8001398:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139a:	6281      	str	r1, [r0, #40]	; 0x28
 800139c:	4770      	bx	lr
	...

080013a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013a0:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013a2:	4b04      	ldr	r3, [pc, #16]	; (80013b4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80013a4:	6959      	ldr	r1, [r3, #20]
 80013a6:	4201      	tst	r1, r0
 80013a8:	d002      	beq.n	80013b0 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013aa:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013ac:	f002 f9ce 	bl	800374c <HAL_GPIO_EXTI_Callback>
 80013b0:	bd08      	pop	{r3, pc}
 80013b2:	bf00      	nop
 80013b4:	40010400 	.word	0x40010400

080013b8 <HAL_OPAMP_Init>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)

{ 
 80013b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if((hopamp == NULL) || (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED) \
 80013bc:	4604      	mov	r4, r0
 80013be:	2800      	cmp	r0, #0
 80013c0:	d066      	beq.n	8001490 <HAL_OPAMP_Init+0xd8>
 80013c2:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80013c6:	2b05      	cmp	r3, #5
 80013c8:	d062      	beq.n	8001490 <HAL_OPAMP_Init+0xd8>
                      || (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY))
 80013ca:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d05e      	beq.n	8001490 <HAL_OPAMP_Init+0xd8>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }
 
    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <HAL_OPAMP_Init+0xe0>)
 80013d4:	699a      	ldr	r2, [r3, #24]
 80013d6:	f042 0201 	orr.w	r2, r2, #1
 80013da:	619a      	str	r2, [r3, #24]
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	9b01      	ldr	r3, [sp, #4]
    
    if(hopamp->State == HAL_OPAMP_STATE_RESET)
 80013e6:	f890 3032 	ldrb.w	r3, [r0, #50]	; 0x32
 80013ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013ee:	b90b      	cbnz	r3, 80013f4 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80013f0:	f880 2031 	strb.w	r2, [r0, #49]	; 0x31
    }

    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80013f4:	4620      	mov	r0, r4
 80013f6:	f002 f873 	bl	80034e0 <HAL_OPAMP_MspInit>
    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /*   - InvertingInputSecondary                */
    /* are Not Applicable                         */
    
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80013fa:	6863      	ldr	r3, [r4, #4]
 80013fc:	6821      	ldr	r1, [r4, #0]
 80013fe:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8001402:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8001406:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8001408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800140a:	4d24      	ldr	r5, [pc, #144]	; (800149c <HAL_OPAMP_Init+0xe4>)
 800140c:	f023 0220 	bic.w	r2, r3, #32
 8001410:	2a40      	cmp	r2, #64	; 0x40
 8001412:	f104 081c 	add.w	r8, r4, #28
 8001416:	68e2      	ldr	r2, [r4, #12]
 8001418:	e898 5100 	ldmia.w	r8, {r8, ip, lr}
 800141c:	d11e      	bne.n	800145c <HAL_OPAMP_Init+0xa4>
    {
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 800141e:	4313      	orrs	r3, r2
 8001420:	ea43 030a 	orr.w	r3, r3, sl
 8001424:	ea43 0309 	orr.w	r3, r3, r9
 8001428:	ea43 0308 	orr.w	r3, r3, r8
 800142c:	ea43 030c 	orr.w	r3, r3, ip
 8001430:	6808      	ldr	r0, [r1, #0]
 8001432:	ea43 030e 	orr.w	r3, r3, lr
 8001436:	ea43 43c7 	orr.w	r3, r3, r7, lsl #19
 800143a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 800143e:	ea00 0605 	and.w	r6, r0, r5
 8001442:	431e      	orrs	r6, r3
 8001444:	600e      	str	r6, [r1, #0]
                                        (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) | \
                                        (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));     
    } 
    
    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8001446:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 800144a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 800144e:	bb0b      	cbnz	r3, 8001494 <HAL_OPAMP_Init+0xdc>
    {
      /* From RESET state to READY State */
    hopamp->State = HAL_OPAMP_STATE_READY;
 8001450:	2301      	movs	r3, #1
 8001452:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    }
    /* else: remain in READY or BUSY state (no update) */
  
    return status;
    }
}
 8001456:	b003      	add	sp, #12
 8001458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      MODIFY_REG(hopamp->Instance->CSR, OPAMP_CSR_UPDATE_PARAMETERS_INIT_MASK, \
 800145c:	68a0      	ldr	r0, [r4, #8]
 800145e:	f8d1 b000 	ldr.w	fp, [r1]
 8001462:	4303      	orrs	r3, r0
 8001464:	431a      	orrs	r2, r3
 8001466:	6963      	ldr	r3, [r4, #20]
 8001468:	ea42 020a 	orr.w	r2, r2, sl
 800146c:	431a      	orrs	r2, r3
 800146e:	ea42 0209 	orr.w	r2, r2, r9
 8001472:	ea42 0208 	orr.w	r2, r2, r8
 8001476:	ea42 030c 	orr.w	r3, r2, ip
 800147a:	ea43 030e 	orr.w	r3, r3, lr
 800147e:	ea43 43c7 	orr.w	r3, r3, r7, lsl #19
 8001482:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
 8001486:	ea0b 0005 	and.w	r0, fp, r5
 800148a:	4303      	orrs	r3, r0
 800148c:	600b      	str	r3, [r1, #0]
 800148e:	e7da      	b.n	8001446 <HAL_OPAMP_Init+0x8e>
    return HAL_ERROR;
 8001490:	2001      	movs	r0, #1
 8001492:	e7e0      	b.n	8001456 <HAL_OPAMP_Init+0x9e>
    return status;
 8001494:	2000      	movs	r0, #0
 8001496:	e7de      	b.n	8001456 <HAL_OPAMP_Init+0x9e>
 8001498:	40021000 	.word	0x40021000
 800149c:	e0003811 	.word	0xe0003811

080014a0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014a0:	6803      	ldr	r3, [r0, #0]
 80014a2:	07da      	lsls	r2, r3, #31
{
 80014a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80014a8:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014aa:	d411      	bmi.n	80014d0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014ac:	682b      	ldr	r3, [r5, #0]
 80014ae:	079b      	lsls	r3, r3, #30
 80014b0:	f100 8088 	bmi.w	80015c4 <HAL_RCC_OscConfig+0x124>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b4:	682b      	ldr	r3, [r5, #0]
 80014b6:	071c      	lsls	r4, r3, #28
 80014b8:	f100 80f8 	bmi.w	80016ac <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014bc:	682b      	ldr	r3, [r5, #0]
 80014be:	0758      	lsls	r0, r3, #29
 80014c0:	f100 8141 	bmi.w	8001746 <HAL_RCC_OscConfig+0x2a6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014c4:	69ea      	ldr	r2, [r5, #28]
 80014c6:	2a00      	cmp	r2, #0
 80014c8:	f040 81d7 	bne.w	800187a <HAL_RCC_OscConfig+0x3da>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80014cc:	2000      	movs	r0, #0
 80014ce:	e021      	b.n	8001514 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014d0:	4cba      	ldr	r4, [pc, #744]	; (80017bc <HAL_RCC_OscConfig+0x31c>)
 80014d2:	6863      	ldr	r3, [r4, #4]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d007      	beq.n	80014ec <HAL_RCC_OscConfig+0x4c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014dc:	6863      	ldr	r3, [r4, #4]
 80014de:	f003 030c 	and.w	r3, r3, #12
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d119      	bne.n	800151a <HAL_RCC_OscConfig+0x7a>
 80014e6:	6863      	ldr	r3, [r4, #4]
 80014e8:	03df      	lsls	r7, r3, #15
 80014ea:	d516      	bpl.n	800151a <HAL_RCC_OscConfig+0x7a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	6821      	ldr	r1, [r4, #0]
 80014f6:	fa93 f3a3 	rbit	r3, r3
 80014fa:	fab3 f383 	clz	r3, r3
 80014fe:	f003 031f 	and.w	r3, r3, #31
 8001502:	2201      	movs	r2, #1
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	420b      	tst	r3, r1
 800150a:	d0cf      	beq.n	80014ac <HAL_RCC_OscConfig+0xc>
 800150c:	686b      	ldr	r3, [r5, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1cc      	bne.n	80014ac <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001512:	2001      	movs	r0, #1
}
 8001514:	b002      	add	sp, #8
 8001516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800151a:	686a      	ldr	r2, [r5, #4]
 800151c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001520:	d125      	bne.n	800156e <HAL_RCC_OscConfig+0xce>
 8001522:	6823      	ldr	r3, [r4, #0]
 8001524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001528:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800152a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800152c:	68a9      	ldr	r1, [r5, #8]
 800152e:	f023 030f 	bic.w	r3, r3, #15
 8001532:	430b      	orrs	r3, r1
 8001534:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001536:	b352      	cbz	r2, 800158e <HAL_RCC_OscConfig+0xee>
        tickstart = HAL_GetTick();
 8001538:	f7ff faa2 	bl	8000a80 <HAL_GetTick>
 800153c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001540:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001542:	2701      	movs	r7, #1
 8001544:	fa96 f3a6 	rbit	r3, r6
 8001548:	6822      	ldr	r2, [r4, #0]
 800154a:	fa96 f3a6 	rbit	r3, r6
 800154e:	fab3 f383 	clz	r3, r3
 8001552:	f003 031f 	and.w	r3, r3, #31
 8001556:	fa07 f303 	lsl.w	r3, r7, r3
 800155a:	4213      	tst	r3, r2
 800155c:	d1a6      	bne.n	80014ac <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800155e:	f7ff fa8f 	bl	8000a80 <HAL_GetTick>
 8001562:	eba0 0008 	sub.w	r0, r0, r8
 8001566:	2864      	cmp	r0, #100	; 0x64
 8001568:	d9ec      	bls.n	8001544 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
 800156a:	2003      	movs	r0, #3
 800156c:	e7d2      	b.n	8001514 <HAL_RCC_OscConfig+0x74>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800156e:	6823      	ldr	r3, [r4, #0]
 8001570:	b932      	cbnz	r2, 8001580 <HAL_RCC_OscConfig+0xe0>
 8001572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001576:	6023      	str	r3, [r4, #0]
 8001578:	6823      	ldr	r3, [r4, #0]
 800157a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800157e:	e7d3      	b.n	8001528 <HAL_RCC_OscConfig+0x88>
 8001580:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8001584:	d1f5      	bne.n	8001572 <HAL_RCC_OscConfig+0xd2>
 8001586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158a:	6023      	str	r3, [r4, #0]
 800158c:	e7c9      	b.n	8001522 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 800158e:	f7ff fa77 	bl	8000a80 <HAL_GetTick>
 8001592:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8001596:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001598:	2701      	movs	r7, #1
 800159a:	fa96 f3a6 	rbit	r3, r6
 800159e:	6822      	ldr	r2, [r4, #0]
 80015a0:	fa96 f3a6 	rbit	r3, r6
 80015a4:	fab3 f383 	clz	r3, r3
 80015a8:	f003 031f 	and.w	r3, r3, #31
 80015ac:	fa07 f303 	lsl.w	r3, r7, r3
 80015b0:	4213      	tst	r3, r2
 80015b2:	f43f af7b 	beq.w	80014ac <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015b6:	f7ff fa63 	bl	8000a80 <HAL_GetTick>
 80015ba:	eba0 0008 	sub.w	r0, r0, r8
 80015be:	2864      	cmp	r0, #100	; 0x64
 80015c0:	d9eb      	bls.n	800159a <HAL_RCC_OscConfig+0xfa>
 80015c2:	e7d2      	b.n	800156a <HAL_RCC_OscConfig+0xca>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80015c4:	4c7d      	ldr	r4, [pc, #500]	; (80017bc <HAL_RCC_OscConfig+0x31c>)
 80015c6:	6863      	ldr	r3, [r4, #4]
 80015c8:	f013 0f0c 	tst.w	r3, #12
 80015cc:	d007      	beq.n	80015de <HAL_RCC_OscConfig+0x13e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80015ce:	6863      	ldr	r3, [r4, #4]
 80015d0:	f003 030c 	and.w	r3, r3, #12
 80015d4:	2b08      	cmp	r3, #8
 80015d6:	d121      	bne.n	800161c <HAL_RCC_OscConfig+0x17c>
 80015d8:	6863      	ldr	r3, [r4, #4]
 80015da:	03de      	lsls	r6, r3, #15
 80015dc:	d41e      	bmi.n	800161c <HAL_RCC_OscConfig+0x17c>
 80015de:	2302      	movs	r3, #2
 80015e0:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015e4:	6821      	ldr	r1, [r4, #0]
 80015e6:	fa93 f3a3 	rbit	r3, r3
 80015ea:	fab3 f383 	clz	r3, r3
 80015ee:	f003 031f 	and.w	r3, r3, #31
 80015f2:	2201      	movs	r2, #1
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	420b      	tst	r3, r1
 80015fa:	d002      	beq.n	8001602 <HAL_RCC_OscConfig+0x162>
 80015fc:	692b      	ldr	r3, [r5, #16]
 80015fe:	4293      	cmp	r3, r2
 8001600:	d187      	bne.n	8001512 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001602:	6821      	ldr	r1, [r4, #0]
 8001604:	23f8      	movs	r3, #248	; 0xf8
 8001606:	fa93 f3a3 	rbit	r3, r3
 800160a:	fab3 f283 	clz	r2, r3
 800160e:	696b      	ldr	r3, [r5, #20]
 8001610:	4093      	lsls	r3, r2
 8001612:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001616:	4313      	orrs	r3, r2
 8001618:	6023      	str	r3, [r4, #0]
 800161a:	e74b      	b.n	80014b4 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800161c:	692a      	ldr	r2, [r5, #16]
 800161e:	2601      	movs	r6, #1
 8001620:	b30a      	cbz	r2, 8001666 <HAL_RCC_OscConfig+0x1c6>
 8001622:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001626:	fab3 f383 	clz	r3, r3
 800162a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800162e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	2702      	movs	r7, #2
 8001636:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001638:	f7ff fa22 	bl	8000a80 <HAL_GetTick>
 800163c:	4680      	mov	r8, r0
 800163e:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	fa97 f3a7 	rbit	r3, r7
 8001648:	fab3 f383 	clz	r3, r3
 800164c:	f003 031f 	and.w	r3, r3, #31
 8001650:	fa06 f303 	lsl.w	r3, r6, r3
 8001654:	4213      	tst	r3, r2
 8001656:	d1d4      	bne.n	8001602 <HAL_RCC_OscConfig+0x162>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001658:	f7ff fa12 	bl	8000a80 <HAL_GetTick>
 800165c:	eba0 0008 	sub.w	r0, r0, r8
 8001660:	2802      	cmp	r0, #2
 8001662:	d9ec      	bls.n	800163e <HAL_RCC_OscConfig+0x19e>
 8001664:	e781      	b.n	800156a <HAL_RCC_OscConfig+0xca>
 8001666:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 800166a:	fab3 f383 	clz	r3, r3
 800166e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001672:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	2702      	movs	r7, #2
 800167a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800167c:	f7ff fa00 	bl	8000a80 <HAL_GetTick>
 8001680:	4680      	mov	r8, r0
 8001682:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	6822      	ldr	r2, [r4, #0]
 8001688:	fa97 f3a7 	rbit	r3, r7
 800168c:	fab3 f383 	clz	r3, r3
 8001690:	f003 031f 	and.w	r3, r3, #31
 8001694:	fa06 f303 	lsl.w	r3, r6, r3
 8001698:	4213      	tst	r3, r2
 800169a:	f43f af0b 	beq.w	80014b4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800169e:	f7ff f9ef 	bl	8000a80 <HAL_GetTick>
 80016a2:	eba0 0008 	sub.w	r0, r0, r8
 80016a6:	2802      	cmp	r0, #2
 80016a8:	d9eb      	bls.n	8001682 <HAL_RCC_OscConfig+0x1e2>
 80016aa:	e75e      	b.n	800156a <HAL_RCC_OscConfig+0xca>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016ac:	69aa      	ldr	r2, [r5, #24]
 80016ae:	4e43      	ldr	r6, [pc, #268]	; (80017bc <HAL_RCC_OscConfig+0x31c>)
 80016b0:	4943      	ldr	r1, [pc, #268]	; (80017c0 <HAL_RCC_OscConfig+0x320>)
 80016b2:	2401      	movs	r4, #1
 80016b4:	b31a      	cbz	r2, 80016fe <HAL_RCC_OscConfig+0x25e>
 80016b6:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80016ba:	fab3 f383 	clz	r3, r3
 80016be:	440b      	add	r3, r1
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	2702      	movs	r7, #2
 80016c4:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80016c6:	f7ff f9db 	bl	8000a80 <HAL_GetTick>
 80016ca:	4680      	mov	r8, r0
 80016cc:	fa97 f3a7 	rbit	r3, r7
 80016d0:	fa97 f3a7 	rbit	r3, r7
 80016d4:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80016da:	fa97 f3a7 	rbit	r3, r7
 80016de:	fab3 f383 	clz	r3, r3
 80016e2:	f003 031f 	and.w	r3, r3, #31
 80016e6:	fa04 f303 	lsl.w	r3, r4, r3
 80016ea:	4213      	tst	r3, r2
 80016ec:	f47f aee6 	bne.w	80014bc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016f0:	f7ff f9c6 	bl	8000a80 <HAL_GetTick>
 80016f4:	eba0 0008 	sub.w	r0, r0, r8
 80016f8:	2802      	cmp	r0, #2
 80016fa:	d9e7      	bls.n	80016cc <HAL_RCC_OscConfig+0x22c>
 80016fc:	e735      	b.n	800156a <HAL_RCC_OscConfig+0xca>
 80016fe:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001702:	fab3 f383 	clz	r3, r3
 8001706:	440b      	add	r3, r1
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	2702      	movs	r7, #2
 800170c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800170e:	f7ff f9b7 	bl	8000a80 <HAL_GetTick>
 8001712:	4680      	mov	r8, r0
 8001714:	fa97 f3a7 	rbit	r3, r7
 8001718:	fa97 f3a7 	rbit	r3, r7
 800171c:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001720:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001722:	fa97 f3a7 	rbit	r3, r7
 8001726:	fab3 f383 	clz	r3, r3
 800172a:	f003 031f 	and.w	r3, r3, #31
 800172e:	fa04 f303 	lsl.w	r3, r4, r3
 8001732:	4213      	tst	r3, r2
 8001734:	f43f aec2 	beq.w	80014bc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001738:	f7ff f9a2 	bl	8000a80 <HAL_GetTick>
 800173c:	eba0 0008 	sub.w	r0, r0, r8
 8001740:	2802      	cmp	r0, #2
 8001742:	d9e7      	bls.n	8001714 <HAL_RCC_OscConfig+0x274>
 8001744:	e711      	b.n	800156a <HAL_RCC_OscConfig+0xca>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001746:	4c1d      	ldr	r4, [pc, #116]	; (80017bc <HAL_RCC_OscConfig+0x31c>)
 8001748:	69e3      	ldr	r3, [r4, #28]
 800174a:	00d9      	lsls	r1, r3, #3
 800174c:	d434      	bmi.n	80017b8 <HAL_RCC_OscConfig+0x318>
      __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	69e3      	ldr	r3, [r4, #28]
 8001750:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001754:	61e3      	str	r3, [r4, #28]
 8001756:	69e3      	ldr	r3, [r4, #28]
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001760:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4f18      	ldr	r7, [pc, #96]	; (80017c4 <HAL_RCC_OscConfig+0x324>)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	05da      	lsls	r2, r3, #23
 8001768:	d52e      	bpl.n	80017c8 <HAL_RCC_OscConfig+0x328>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176a:	68eb      	ldr	r3, [r5, #12]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d13c      	bne.n	80017ea <HAL_RCC_OscConfig+0x34a>
 8001770:	6a23      	ldr	r3, [r4, #32]
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001778:	f7ff f982 	bl	8000a80 <HAL_GetTick>
 800177c:	2702      	movs	r7, #2
 800177e:	4682      	mov	sl, r0
 8001780:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001782:	f04f 0801 	mov.w	r8, #1
 8001786:	fa97 f3a7 	rbit	r3, r7
 800178a:	fa97 f3a7 	rbit	r3, r7
 800178e:	2b00      	cmp	r3, #0
 8001790:	d06b      	beq.n	800186a <HAL_RCC_OscConfig+0x3ca>
 8001792:	6a22      	ldr	r2, [r4, #32]
 8001794:	fa99 f3a9 	rbit	r3, r9
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	f003 031f 	and.w	r3, r3, #31
 80017a0:	fa08 f303 	lsl.w	r3, r8, r3
 80017a4:	4213      	tst	r3, r2
 80017a6:	d057      	beq.n	8001858 <HAL_RCC_OscConfig+0x3b8>
    if(pwrclkchanged == SET)
 80017a8:	2e00      	cmp	r6, #0
 80017aa:	f43f ae8b 	beq.w	80014c4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017ae:	69e3      	ldr	r3, [r4, #28]
 80017b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017b4:	61e3      	str	r3, [r4, #28]
 80017b6:	e685      	b.n	80014c4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80017b8:	2600      	movs	r6, #0
 80017ba:	e7d2      	b.n	8001762 <HAL_RCC_OscConfig+0x2c2>
 80017bc:	40021000 	.word	0x40021000
 80017c0:	10908120 	.word	0x10908120
 80017c4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017ce:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80017d0:	f7ff f956 	bl	8000a80 <HAL_GetTick>
 80017d4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	05db      	lsls	r3, r3, #23
 80017da:	d4c6      	bmi.n	800176a <HAL_RCC_OscConfig+0x2ca>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017dc:	f7ff f950 	bl	8000a80 <HAL_GetTick>
 80017e0:	eba0 0008 	sub.w	r0, r0, r8
 80017e4:	2864      	cmp	r0, #100	; 0x64
 80017e6:	d9f6      	bls.n	80017d6 <HAL_RCC_OscConfig+0x336>
 80017e8:	e6bf      	b.n	800156a <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ea:	bb3b      	cbnz	r3, 800183c <HAL_RCC_OscConfig+0x39c>
 80017ec:	6a23      	ldr	r3, [r4, #32]
 80017ee:	f023 0301 	bic.w	r3, r3, #1
 80017f2:	6223      	str	r3, [r4, #32]
 80017f4:	6a23      	ldr	r3, [r4, #32]
 80017f6:	f023 0304 	bic.w	r3, r3, #4
 80017fa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80017fc:	f7ff f940 	bl	8000a80 <HAL_GetTick>
 8001800:	2702      	movs	r7, #2
 8001802:	4682      	mov	sl, r0
 8001804:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001806:	f04f 0801 	mov.w	r8, #1
 800180a:	fa97 f3a7 	rbit	r3, r7
 800180e:	fa97 f3a7 	rbit	r3, r7
 8001812:	b373      	cbz	r3, 8001872 <HAL_RCC_OscConfig+0x3d2>
 8001814:	6a22      	ldr	r2, [r4, #32]
 8001816:	fa99 f3a9 	rbit	r3, r9
 800181a:	fab3 f383 	clz	r3, r3
 800181e:	f003 031f 	and.w	r3, r3, #31
 8001822:	fa08 f303 	lsl.w	r3, r8, r3
 8001826:	4213      	tst	r3, r2
 8001828:	d0be      	beq.n	80017a8 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800182a:	f7ff f929 	bl	8000a80 <HAL_GetTick>
 800182e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001832:	eba0 000a 	sub.w	r0, r0, sl
 8001836:	4298      	cmp	r0, r3
 8001838:	d9e7      	bls.n	800180a <HAL_RCC_OscConfig+0x36a>
 800183a:	e696      	b.n	800156a <HAL_RCC_OscConfig+0xca>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800183c:	2b05      	cmp	r3, #5
 800183e:	6a23      	ldr	r3, [r4, #32]
 8001840:	d103      	bne.n	800184a <HAL_RCC_OscConfig+0x3aa>
 8001842:	f043 0304 	orr.w	r3, r3, #4
 8001846:	6223      	str	r3, [r4, #32]
 8001848:	e792      	b.n	8001770 <HAL_RCC_OscConfig+0x2d0>
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	6223      	str	r3, [r4, #32]
 8001850:	6a23      	ldr	r3, [r4, #32]
 8001852:	f023 0304 	bic.w	r3, r3, #4
 8001856:	e78e      	b.n	8001776 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7ff f912 	bl	8000a80 <HAL_GetTick>
 800185c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001860:	eba0 000a 	sub.w	r0, r0, sl
 8001864:	4298      	cmp	r0, r3
 8001866:	d98e      	bls.n	8001786 <HAL_RCC_OscConfig+0x2e6>
 8001868:	e67f      	b.n	800156a <HAL_RCC_OscConfig+0xca>
 800186a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001870:	e790      	b.n	8001794 <HAL_RCC_OscConfig+0x2f4>
 8001872:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001876:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001878:	e7cd      	b.n	8001816 <HAL_RCC_OscConfig+0x376>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800187a:	4c41      	ldr	r4, [pc, #260]	; (8001980 <HAL_RCC_OscConfig+0x4e0>)
 800187c:	6863      	ldr	r3, [r4, #4]
 800187e:	f003 030c 	and.w	r3, r3, #12
 8001882:	2b08      	cmp	r3, #8
 8001884:	f43f ae45 	beq.w	8001512 <HAL_RCC_OscConfig+0x72>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001888:	2a02      	cmp	r2, #2
 800188a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800188e:	d152      	bne.n	8001936 <HAL_RCC_OscConfig+0x496>
 8001890:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001894:	fab3 f383 	clz	r3, r3
 8001898:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800189c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80018a6:	f7ff f8eb 	bl	8000a80 <HAL_GetTick>
 80018aa:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80018ae:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018b0:	2601      	movs	r6, #1
 80018b2:	fa97 f3a7 	rbit	r3, r7
 80018b6:	6822      	ldr	r2, [r4, #0]
 80018b8:	fa97 f3a7 	rbit	r3, r7
 80018bc:	fab3 f383 	clz	r3, r3
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	fa06 f303 	lsl.w	r3, r6, r3
 80018c8:	4213      	tst	r3, r2
 80018ca:	d12d      	bne.n	8001928 <HAL_RCC_OscConfig+0x488>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018cc:	6862      	ldr	r2, [r4, #4]
 80018ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80018d0:	6a29      	ldr	r1, [r5, #32]
 80018d2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80018d6:	430b      	orrs	r3, r1
 80018d8:	4313      	orrs	r3, r2
 80018da:	6063      	str	r3, [r4, #4]
 80018dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80018e0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80018e4:	fab3 f383 	clz	r3, r3
 80018e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80018f6:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 80018f8:	f7ff f8c2 	bl	8000a80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018fc:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 80018fe:	4607      	mov	r7, r0
 8001900:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001904:	6822      	ldr	r2, [r4, #0]
 8001906:	fa95 f3a5 	rbit	r3, r5
 800190a:	fab3 f383 	clz	r3, r3
 800190e:	f003 031f 	and.w	r3, r3, #31
 8001912:	fa06 f303 	lsl.w	r3, r6, r3
 8001916:	4213      	tst	r3, r2
 8001918:	f47f add8 	bne.w	80014cc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800191c:	f7ff f8b0 	bl	8000a80 <HAL_GetTick>
 8001920:	1bc0      	subs	r0, r0, r7
 8001922:	2802      	cmp	r0, #2
 8001924:	d9ec      	bls.n	8001900 <HAL_RCC_OscConfig+0x460>
 8001926:	e620      	b.n	800156a <HAL_RCC_OscConfig+0xca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff f8aa 	bl	8000a80 <HAL_GetTick>
 800192c:	eba0 0008 	sub.w	r0, r0, r8
 8001930:	2802      	cmp	r0, #2
 8001932:	d9be      	bls.n	80018b2 <HAL_RCC_OscConfig+0x412>
 8001934:	e619      	b.n	800156a <HAL_RCC_OscConfig+0xca>
 8001936:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800193a:	fab3 f383 	clz	r3, r3
 800193e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001942:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800194c:	f7ff f898 	bl	8000a80 <HAL_GetTick>
 8001950:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001954:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001956:	2601      	movs	r6, #1
 8001958:	fa95 f3a5 	rbit	r3, r5
 800195c:	6822      	ldr	r2, [r4, #0]
 800195e:	fa95 f3a5 	rbit	r3, r5
 8001962:	fab3 f383 	clz	r3, r3
 8001966:	f003 031f 	and.w	r3, r3, #31
 800196a:	fa06 f303 	lsl.w	r3, r6, r3
 800196e:	4213      	tst	r3, r2
 8001970:	f43f adac 	beq.w	80014cc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001974:	f7ff f884 	bl	8000a80 <HAL_GetTick>
 8001978:	1bc0      	subs	r0, r0, r7
 800197a:	2802      	cmp	r0, #2
 800197c:	d9ec      	bls.n	8001958 <HAL_RCC_OscConfig+0x4b8>
 800197e:	e5f4      	b.n	800156a <HAL_RCC_OscConfig+0xca>
 8001980:	40021000 	.word	0x40021000

08001984 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001984:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001986:	4c13      	ldr	r4, [pc, #76]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x50>)
 8001988:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800198a:	f001 030c 	and.w	r3, r1, #12
 800198e:	2b08      	cmp	r3, #8
 8001990:	d11e      	bne.n	80019d0 <HAL_RCC_GetSysClockFreq+0x4c>
 8001992:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001996:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800199a:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	fa22 f303 	lsr.w	r3, r2, r3
 80019a6:	4a0c      	ldr	r2, [pc, #48]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x54>)
 80019a8:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80019aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80019ac:	220f      	movs	r2, #15
 80019ae:	fa92 f2a2 	rbit	r2, r2
 80019b2:	fab2 f282 	clz	r2, r2
 80019b6:	f003 030f 	and.w	r3, r3, #15
 80019ba:	40d3      	lsrs	r3, r2
 80019bc:	4a07      	ldr	r2, [pc, #28]	; (80019dc <HAL_RCC_GetSysClockFreq+0x58>)
 80019be:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80019c0:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80019c2:	bf4a      	itet	mi
 80019c4:	4b06      	ldrmi	r3, [pc, #24]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80019c6:	4b07      	ldrpl	r3, [pc, #28]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80019c8:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80019cc:	4358      	muls	r0, r3
 80019ce:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80019d0:	4803      	ldr	r0, [pc, #12]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80019d2:	bd10      	pop	{r4, pc}
 80019d4:	40021000 	.word	0x40021000
 80019d8:	08003904 	.word	0x08003904
 80019dc:	08003914 	.word	0x08003914
 80019e0:	007a1200 	.word	0x007a1200
 80019e4:	003d0900 	.word	0x003d0900

080019e8 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019e8:	4a5c      	ldr	r2, [pc, #368]	; (8001b5c <HAL_RCC_ClockConfig+0x174>)
 80019ea:	6813      	ldr	r3, [r2, #0]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	428b      	cmp	r3, r1
{
 80019f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f6:	4606      	mov	r6, r0
 80019f8:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80019fa:	d330      	bcc.n	8001a5e <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019fc:	6832      	ldr	r2, [r6, #0]
 80019fe:	0791      	lsls	r1, r2, #30
 8001a00:	d43a      	bmi.n	8001a78 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a02:	07d2      	lsls	r2, r2, #31
 8001a04:	d440      	bmi.n	8001a88 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001a06:	4a55      	ldr	r2, [pc, #340]	; (8001b5c <HAL_RCC_ClockConfig+0x174>)
 8001a08:	6813      	ldr	r3, [r2, #0]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	429d      	cmp	r5, r3
 8001a10:	f0c0 8092 	bcc.w	8001b38 <HAL_RCC_ClockConfig+0x150>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	6832      	ldr	r2, [r6, #0]
 8001a16:	4c52      	ldr	r4, [pc, #328]	; (8001b60 <HAL_RCC_ClockConfig+0x178>)
 8001a18:	f012 0f04 	tst.w	r2, #4
 8001a1c:	f040 8097 	bne.w	8001b4e <HAL_RCC_ClockConfig+0x166>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a20:	0713      	lsls	r3, r2, #28
 8001a22:	d506      	bpl.n	8001a32 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a24:	6863      	ldr	r3, [r4, #4]
 8001a26:	6932      	ldr	r2, [r6, #16]
 8001a28:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a2c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a30:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a32:	f7ff ffa7 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 8001a36:	6863      	ldr	r3, [r4, #4]
 8001a38:	22f0      	movs	r2, #240	; 0xf0
 8001a3a:	fa92 f2a2 	rbit	r2, r2
 8001a3e:	fab2 f282 	clz	r2, r2
 8001a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a46:	40d3      	lsrs	r3, r2
 8001a48:	4a46      	ldr	r2, [pc, #280]	; (8001b64 <HAL_RCC_ClockConfig+0x17c>)
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	40d8      	lsrs	r0, r3
 8001a4e:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <HAL_RCC_ClockConfig+0x180>)
 8001a50:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7fe ffd2 	bl	80009fc <HAL_InitTick>
  return HAL_OK;
 8001a58:	2000      	movs	r0, #0
}
 8001a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a5e:	6813      	ldr	r3, [r2, #0]
 8001a60:	f023 0307 	bic.w	r3, r3, #7
 8001a64:	430b      	orrs	r3, r1
 8001a66:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a68:	6813      	ldr	r3, [r2, #0]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	4299      	cmp	r1, r3
 8001a70:	d0c4      	beq.n	80019fc <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8001a72:	2001      	movs	r0, #1
 8001a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a78:	4939      	ldr	r1, [pc, #228]	; (8001b60 <HAL_RCC_ClockConfig+0x178>)
 8001a7a:	68b0      	ldr	r0, [r6, #8]
 8001a7c:	684b      	ldr	r3, [r1, #4]
 8001a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a82:	4303      	orrs	r3, r0
 8001a84:	604b      	str	r3, [r1, #4]
 8001a86:	e7bc      	b.n	8001a02 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a88:	6872      	ldr	r2, [r6, #4]
 8001a8a:	4c35      	ldr	r4, [pc, #212]	; (8001b60 <HAL_RCC_ClockConfig+0x178>)
 8001a8c:	2a01      	cmp	r2, #1
 8001a8e:	d128      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xfa>
 8001a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a94:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a98:	6821      	ldr	r1, [r4, #0]
 8001a9a:	fa93 f3a3 	rbit	r3, r3
 8001a9e:	fab3 f383 	clz	r3, r3
 8001aa2:	f003 031f 	and.w	r3, r3, #31
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aac:	d0e1      	beq.n	8001a72 <HAL_RCC_ClockConfig+0x8a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aae:	6863      	ldr	r3, [r4, #4]
 8001ab0:	f023 0303 	bic.w	r3, r3, #3
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	6062      	str	r2, [r4, #4]
    tickstart = HAL_GetTick();
 8001ab8:	f7fe ffe2 	bl	8000a80 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001abc:	6873      	ldr	r3, [r6, #4]
 8001abe:	2b01      	cmp	r3, #1
    tickstart = HAL_GetTick();
 8001ac0:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac2:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ac6:	d11f      	bne.n	8001b08 <HAL_RCC_ClockConfig+0x120>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac8:	6863      	ldr	r3, [r4, #4]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b04      	cmp	r3, #4
 8001ad0:	d099      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad2:	f7fe ffd5 	bl	8000a80 <HAL_GetTick>
 8001ad6:	1bc0      	subs	r0, r0, r7
 8001ad8:	4540      	cmp	r0, r8
 8001ada:	d9f5      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0xe0>
          return HAL_TIMEOUT;
 8001adc:	2003      	movs	r0, #3
 8001ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ae2:	2a02      	cmp	r2, #2
 8001ae4:	bf0c      	ite	eq
 8001ae6:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001aea:	2302      	movne	r3, #2
 8001aec:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af0:	6820      	ldr	r0, [r4, #0]
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	fab3 f383 	clz	r3, r3
 8001afa:	f003 031f 	and.w	r3, r3, #31
 8001afe:	2101      	movs	r1, #1
 8001b00:	fa01 f303 	lsl.w	r3, r1, r3
 8001b04:	4203      	tst	r3, r0
 8001b06:	e7d1      	b.n	8001aac <HAL_RCC_ClockConfig+0xc4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d110      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x146>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b0c:	6863      	ldr	r3, [r4, #4]
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	f43f af77 	beq.w	8001a06 <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b18:	f7fe ffb2 	bl	8000a80 <HAL_GetTick>
 8001b1c:	1bc0      	subs	r0, r0, r7
 8001b1e:	4540      	cmp	r0, r8
 8001b20:	d9f4      	bls.n	8001b0c <HAL_RCC_ClockConfig+0x124>
 8001b22:	e7db      	b.n	8001adc <HAL_RCC_ClockConfig+0xf4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b24:	f7fe ffac 	bl	8000a80 <HAL_GetTick>
 8001b28:	1bc0      	subs	r0, r0, r7
 8001b2a:	4540      	cmp	r0, r8
 8001b2c:	d8d6      	bhi.n	8001adc <HAL_RCC_ClockConfig+0xf4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b2e:	6863      	ldr	r3, [r4, #4]
 8001b30:	f013 0f0c 	tst.w	r3, #12
 8001b34:	d1f6      	bne.n	8001b24 <HAL_RCC_ClockConfig+0x13c>
 8001b36:	e766      	b.n	8001a06 <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b38:	6813      	ldr	r3, [r2, #0]
 8001b3a:	f023 0307 	bic.w	r3, r3, #7
 8001b3e:	432b      	orrs	r3, r5
 8001b40:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001b42:	6813      	ldr	r3, [r2, #0]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	429d      	cmp	r5, r3
 8001b4a:	d192      	bne.n	8001a72 <HAL_RCC_ClockConfig+0x8a>
 8001b4c:	e762      	b.n	8001a14 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b4e:	6863      	ldr	r3, [r4, #4]
 8001b50:	68f1      	ldr	r1, [r6, #12]
 8001b52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b56:	430b      	orrs	r3, r1
 8001b58:	6063      	str	r3, [r4, #4]
 8001b5a:	e761      	b.n	8001a20 <HAL_RCC_ClockConfig+0x38>
 8001b5c:	40022000 	.word	0x40022000
 8001b60:	40021000 	.word	0x40021000
 8001b64:	08003943 	.word	0x08003943
 8001b68:	20000404 	.word	0x20000404

08001b6c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b6c:	4b01      	ldr	r3, [pc, #4]	; (8001b74 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b6e:	6818      	ldr	r0, [r3, #0]
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000404 	.word	0x20000404

08001b78 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	fa92 f2a2 	rbit	r2, r2
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b8c:	40d3      	lsrs	r3, r2
 8001b8e:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b90:	5cd3      	ldrb	r3, [r2, r3]
 8001b92:	4a04      	ldr	r2, [pc, #16]	; (8001ba4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001b94:	6810      	ldr	r0, [r2, #0]
}    
 8001b96:	40d8      	lsrs	r0, r3
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	08003953 	.word	0x08003953
 8001ba4:	20000404 	.word	0x20000404

08001ba8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001ba8:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001baa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	fa92 f2a2 	rbit	r2, r2
 8001bb4:	fab2 f282 	clz	r2, r2
 8001bb8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001bbc:	40d3      	lsrs	r3, r2
 8001bbe:	4a04      	ldr	r2, [pc, #16]	; (8001bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bc0:	5cd3      	ldrb	r3, [r2, r3]
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001bc4:	6810      	ldr	r0, [r2, #0]
} 
 8001bc6:	40d8      	lsrs	r0, r3
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	08003953 	.word	0x08003953
 8001bd4:	20000404 	.word	0x20000404

08001bd8 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bd8:	6803      	ldr	r3, [r0, #0]
{
 8001bda:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001bde:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001be0:	03d8      	lsls	r0, r3, #15
 8001be2:	d520      	bpl.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be4:	4c50      	ldr	r4, [pc, #320]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001be6:	69e3      	ldr	r3, [r4, #28]
 8001be8:	00d9      	lsls	r1, r3, #3
 8001bea:	d444      	bmi.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bec:	69e3      	ldr	r3, [r4, #28]
 8001bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	61e3      	str	r3, [r4, #28]
 8001bf4:	69e3      	ldr	r3, [r4, #28]
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001bfe:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c00:	4f4a      	ldr	r7, [pc, #296]	; (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	05da      	lsls	r2, r3, #23
 8001c06:	d538      	bpl.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0xa2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c08:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c0a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001c0e:	d148      	bne.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0xca>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001c10:	6a23      	ldr	r3, [r4, #32]
 8001c12:	686a      	ldr	r2, [r5, #4]
 8001c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c1c:	b11e      	cbz	r6, 8001c26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1e:	69e3      	ldr	r3, [r4, #28]
 8001c20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c24:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c26:	6828      	ldr	r0, [r5, #0]
 8001c28:	07c1      	lsls	r1, r0, #31
 8001c2a:	d506      	bpl.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c2c:	4a3e      	ldr	r2, [pc, #248]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c2e:	68a9      	ldr	r1, [r5, #8]
 8001c30:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c32:	f023 0303 	bic.w	r3, r3, #3
 8001c36:	430b      	orrs	r3, r1
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c3a:	0682      	lsls	r2, r0, #26
 8001c3c:	d506      	bpl.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c3e:	4a3a      	ldr	r2, [pc, #232]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c40:	68e9      	ldr	r1, [r5, #12]
 8001c42:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c44:	f023 0310 	bic.w	r3, r3, #16
 8001c48:	430b      	orrs	r3, r1
 8001c4a:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001c4c:	0603      	lsls	r3, r0, #24
 8001c4e:	d506      	bpl.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001c50:	4a35      	ldr	r2, [pc, #212]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c52:	6929      	ldr	r1, [r5, #16]
 8001c54:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c56:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001c5a:	430b      	orrs	r3, r1
 8001c5c:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001c5e:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8001c62:	d01b      	beq.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001c64:	4a30      	ldr	r2, [pc, #192]	; (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001c66:	6969      	ldr	r1, [r5, #20]
 8001c68:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001c72:	2000      	movs	r0, #0
 8001c74:	e012      	b.n	8001c9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    FlagStatus       pwrclkchanged = RESET;
 8001c76:	2600      	movs	r6, #0
 8001c78:	e7c2      	b.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c80:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001c82:	f7fe fefd 	bl	8000a80 <HAL_GetTick>
 8001c86:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	05db      	lsls	r3, r3, #23
 8001c8c:	d4bc      	bmi.n	8001c08 <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8e:	f7fe fef7 	bl	8000a80 <HAL_GetTick>
 8001c92:	eba0 0008 	sub.w	r0, r0, r8
 8001c96:	2864      	cmp	r0, #100	; 0x64
 8001c98:	d9f6      	bls.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 8001c9a:	2003      	movs	r0, #3
}
 8001c9c:	b002      	add	sp, #8
 8001c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ca2:	686a      	ldr	r2, [r5, #4]
 8001ca4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d0b1      	beq.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cac:	6a21      	ldr	r1, [r4, #32]
 8001cae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cb2:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8001cb6:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cba:	f8df e074 	ldr.w	lr, [pc, #116]	; 8001d30 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8001cbe:	fab2 f282 	clz	r2, r2
 8001cc2:	4472      	add	r2, lr
 8001cc4:	0092      	lsls	r2, r2, #2
 8001cc6:	2701      	movs	r7, #1
 8001cc8:	6017      	str	r7, [r2, #0]
 8001cca:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cce:	fab3 f383 	clz	r3, r3
 8001cd2:	4473      	add	r3, lr
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8001cda:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001cdc:	07c8      	lsls	r0, r1, #31
 8001cde:	d597      	bpl.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001ce0:	f7fe fece 	bl	8000a80 <HAL_GetTick>
 8001ce4:	f04f 0802 	mov.w	r8, #2
 8001ce8:	4682      	mov	sl, r0
 8001cea:	46c1      	mov	r9, r8
 8001cec:	fa98 f3a8 	rbit	r3, r8
 8001cf0:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	b19b      	cbz	r3, 8001d1e <HAL_RCCEx_PeriphCLKConfig+0x146>
 8001cf6:	6a22      	ldr	r2, [r4, #32]
 8001cf8:	fa99 f3a9 	rbit	r3, r9
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	f003 031f 	and.w	r3, r3, #31
 8001d04:	fa07 f303 	lsl.w	r3, r7, r3
 8001d08:	4213      	tst	r3, r2
 8001d0a:	d181      	bne.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d0c:	f7fe feb8 	bl	8000a80 <HAL_GetTick>
 8001d10:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d14:	eba0 000a 	sub.w	r0, r0, sl
 8001d18:	4298      	cmp	r0, r3
 8001d1a:	d9e7      	bls.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001d1c:	e7bd      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8001d1e:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d22:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d24:	e7e8      	b.n	8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8001d26:	bf00      	nop
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	10908100 	.word	0x10908100

08001d34 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d34:	6803      	ldr	r3, [r0, #0]
 8001d36:	68da      	ldr	r2, [r3, #12]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	f042 0201 	orr.w	r2, r2, #1
 8001d44:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001d46:	2000      	movs	r0, #0
 8001d48:	4770      	bx	lr

08001d4a <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001d4a:	6803      	ldr	r3, [r0, #0]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	f022 0201 	bic.w	r2, r2, #1
 8001d52:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001d54:	6a19      	ldr	r1, [r3, #32]
 8001d56:	f241 1211 	movw	r2, #4369	; 0x1111
 8001d5a:	4211      	tst	r1, r2
 8001d5c:	d108      	bne.n	8001d70 <HAL_TIM_Base_Stop_IT+0x26>
 8001d5e:	6a19      	ldr	r1, [r3, #32]
 8001d60:	f240 4244 	movw	r2, #1092	; 0x444
 8001d64:	4211      	tst	r1, r2
 8001d66:	bf02      	ittt	eq
 8001d68:	681a      	ldreq	r2, [r3, #0]
 8001d6a:	f022 0201 	biceq.w	r2, r2, #1
 8001d6e:	601a      	streq	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 8001d70:	2000      	movs	r0, #0
 8001d72:	4770      	bx	lr

08001d74 <HAL_TIM_PWM_MspInit>:
 8001d74:	4770      	bx	lr

08001d76 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d76:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 8001d78:	b189      	cbz	r1, 8001d9e <HAL_TIM_Encoder_Start+0x28>
 8001d7a:	2904      	cmp	r1, #4
 8001d7c:	d007      	beq.n	8001d8e <HAL_TIM_Encoder_Start+0x18>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001d7e:	6a1a      	ldr	r2, [r3, #32]
 8001d80:	f022 0201 	bic.w	r2, r2, #1
 8001d84:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001d86:	6a1a      	ldr	r2, [r3, #32]
 8001d88:	f042 0201 	orr.w	r2, r2, #1
 8001d8c:	621a      	str	r2, [r3, #32]
  TIMx->CCER &= ~tmp;
 8001d8e:	6a1a      	ldr	r2, [r3, #32]
 8001d90:	f022 0210 	bic.w	r2, r2, #16
 8001d94:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001d96:	6a1a      	ldr	r2, [r3, #32]
 8001d98:	f042 0210 	orr.w	r2, r2, #16
 8001d9c:	e006      	b.n	8001dac <HAL_TIM_Encoder_Start+0x36>
  TIMx->CCER &= ~tmp;
 8001d9e:	6a1a      	ldr	r2, [r3, #32]
 8001da0:	f022 0201 	bic.w	r2, r2, #1
 8001da4:	621a      	str	r2, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001da6:	6a1a      	ldr	r2, [r3, #32]
 8001da8:	f042 0201 	orr.w	r2, r2, #1
 8001dac:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	f042 0201 	orr.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]
}
 8001db6:	2000      	movs	r0, #0
 8001db8:	4770      	bx	lr

08001dba <HAL_TIM_OC_DelayElapsedCallback>:
 8001dba:	4770      	bx	lr

08001dbc <HAL_TIM_IC_CaptureCallback>:
 8001dbc:	4770      	bx	lr

08001dbe <HAL_TIM_PWM_PulseFinishedCallback>:
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_TIM_TriggerCallback>:
 8001dc0:	4770      	bx	lr

08001dc2 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dc2:	6803      	ldr	r3, [r0, #0]
 8001dc4:	691a      	ldr	r2, [r3, #16]
 8001dc6:	0791      	lsls	r1, r2, #30
{
 8001dc8:	b510      	push	{r4, lr}
 8001dca:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dcc:	d50f      	bpl.n	8001dee <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001dce:	68da      	ldr	r2, [r3, #12]
 8001dd0:	0792      	lsls	r2, r2, #30
 8001dd2:	d50c      	bpl.n	8001dee <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001dd4:	f06f 0202 	mvn.w	r2, #2
 8001dd8:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dda:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ddc:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dde:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001de0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001de2:	f000 8085 	beq.w	8001ef0 <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001de6:	f7ff ffe9 	bl	8001dbc <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dea:	2300      	movs	r3, #0
 8001dec:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dee:	6823      	ldr	r3, [r4, #0]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	0752      	lsls	r2, r2, #29
 8001df4:	d510      	bpl.n	8001e18 <HAL_TIM_IRQHandler+0x56>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	0750      	lsls	r0, r2, #29
 8001dfa:	d50d      	bpl.n	8001e18 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dfc:	f06f 0204 	mvn.w	r2, #4
 8001e00:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e02:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e04:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e06:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e0a:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001e0c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e0e:	d075      	beq.n	8001efc <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e10:	f7ff ffd4 	bl	8001dbc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e14:	2300      	movs	r3, #0
 8001e16:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	691a      	ldr	r2, [r3, #16]
 8001e1c:	0711      	lsls	r1, r2, #28
 8001e1e:	d50f      	bpl.n	8001e40 <HAL_TIM_IRQHandler+0x7e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001e20:	68da      	ldr	r2, [r3, #12]
 8001e22:	0712      	lsls	r2, r2, #28
 8001e24:	d50c      	bpl.n	8001e40 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e26:	f06f 0208 	mvn.w	r2, #8
 8001e2a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e2c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e2e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e30:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e32:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001e34:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e36:	d067      	beq.n	8001f08 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e38:	f7ff ffc0 	bl	8001dbc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e40:	6823      	ldr	r3, [r4, #0]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	06d0      	lsls	r0, r2, #27
 8001e46:	d510      	bpl.n	8001e6a <HAL_TIM_IRQHandler+0xa8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	06d1      	lsls	r1, r2, #27
 8001e4c:	d50d      	bpl.n	8001e6a <HAL_TIM_IRQHandler+0xa8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e4e:	f06f 0210 	mvn.w	r2, #16
 8001e52:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e54:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e56:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e58:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e5c:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e60:	d058      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	f7ff ffab 	bl	8001dbc <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e66:	2300      	movs	r3, #0
 8001e68:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	691a      	ldr	r2, [r3, #16]
 8001e6e:	07d2      	lsls	r2, r2, #31
 8001e70:	d508      	bpl.n	8001e84 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	07d0      	lsls	r0, r2, #31
 8001e76:	d505      	bpl.n	8001e84 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e78:	f06f 0201 	mvn.w	r2, #1
 8001e7c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e7e:	4620      	mov	r0, r4
 8001e80:	f001 fc58 	bl	8003734 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	691a      	ldr	r2, [r3, #16]
 8001e88:	0611      	lsls	r1, r2, #24
 8001e8a:	d508      	bpl.n	8001e9e <HAL_TIM_IRQHandler+0xdc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001e8c:	68da      	ldr	r2, [r3, #12]
 8001e8e:	0612      	lsls	r2, r2, #24
 8001e90:	d505      	bpl.n	8001e9e <HAL_TIM_IRQHandler+0xdc>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e96:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001e98:	4620      	mov	r0, r4
 8001e9a:	f000 fc0e 	bl	80026ba <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001e9e:	6823      	ldr	r3, [r4, #0]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	05d0      	lsls	r0, r2, #23
 8001ea4:	d508      	bpl.n	8001eb8 <HAL_TIM_IRQHandler+0xf6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	0611      	lsls	r1, r2, #24
 8001eaa:	d505      	bpl.n	8001eb8 <HAL_TIM_IRQHandler+0xf6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001eac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001eb0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f000 fc02 	bl	80026bc <HAL_TIMEx_Break2Callback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	0652      	lsls	r2, r2, #25
 8001ebe:	d508      	bpl.n	8001ed2 <HAL_TIM_IRQHandler+0x110>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001ec0:	68da      	ldr	r2, [r3, #12]
 8001ec2:	0650      	lsls	r0, r2, #25
 8001ec4:	d505      	bpl.n	8001ed2 <HAL_TIM_IRQHandler+0x110>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ec6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001eca:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f7ff ff77 	bl	8001dc0 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	0691      	lsls	r1, r2, #26
 8001ed8:	d522      	bpl.n	8001f20 <HAL_TIM_IRQHandler+0x15e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	0692      	lsls	r2, r2, #26
 8001ede:	d51f      	bpl.n	8001f20 <HAL_TIM_IRQHandler+0x15e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ee0:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001ee4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ee6:	611a      	str	r2, [r3, #16]
}
 8001ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001eec:	f000 bbe4 	b.w	80026b8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ef0:	f7ff ff63 	bl	8001dba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	f7ff ff62 	bl	8001dbe <HAL_TIM_PWM_PulseFinishedCallback>
 8001efa:	e776      	b.n	8001dea <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001efc:	f7ff ff5d 	bl	8001dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f00:	4620      	mov	r0, r4
 8001f02:	f7ff ff5c 	bl	8001dbe <HAL_TIM_PWM_PulseFinishedCallback>
 8001f06:	e785      	b.n	8001e14 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f08:	f7ff ff57 	bl	8001dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7ff ff56 	bl	8001dbe <HAL_TIM_PWM_PulseFinishedCallback>
 8001f12:	e793      	b.n	8001e3c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f14:	f7ff ff51 	bl	8001dba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f18:	4620      	mov	r0, r4
 8001f1a:	f7ff ff50 	bl	8001dbe <HAL_TIM_PWM_PulseFinishedCallback>
 8001f1e:	e7a2      	b.n	8001e66 <HAL_TIM_IRQHandler+0xa4>
 8001f20:	bd10      	pop	{r4, pc}
	...

08001f24 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f24:	4a21      	ldr	r2, [pc, #132]	; (8001fac <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 8001f26:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f28:	4290      	cmp	r0, r2
{
 8001f2a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f2c:	d005      	beq.n	8001f3a <TIM_Base_SetConfig+0x16>
 8001f2e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f32:	d002      	beq.n	8001f3a <TIM_Base_SetConfig+0x16>
 8001f34:	4c1e      	ldr	r4, [pc, #120]	; (8001fb0 <TIM_Base_SetConfig+0x8c>)
 8001f36:	42a0      	cmp	r0, r4
 8001f38:	d10c      	bne.n	8001f54 <TIM_Base_SetConfig+0x30>
    tmpcr1 |= Structure->CounterMode;
 8001f3a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f40:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001f42:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f46:	d010      	beq.n	8001f6a <TIM_Base_SetConfig+0x46>
 8001f48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001f4c:	d00d      	beq.n	8001f6a <TIM_Base_SetConfig+0x46>
 8001f4e:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <TIM_Base_SetConfig+0x8c>)
 8001f50:	4290      	cmp	r0, r2
 8001f52:	d00a      	beq.n	8001f6a <TIM_Base_SetConfig+0x46>
 8001f54:	4a17      	ldr	r2, [pc, #92]	; (8001fb4 <TIM_Base_SetConfig+0x90>)
 8001f56:	4290      	cmp	r0, r2
 8001f58:	d007      	beq.n	8001f6a <TIM_Base_SetConfig+0x46>
 8001f5a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f5e:	4290      	cmp	r0, r2
 8001f60:	d003      	beq.n	8001f6a <TIM_Base_SetConfig+0x46>
 8001f62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001f66:	4290      	cmp	r0, r2
 8001f68:	d103      	bne.n	8001f72 <TIM_Base_SetConfig+0x4e>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f6a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f70:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f72:	694a      	ldr	r2, [r1, #20]
 8001f74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f78:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001f7a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f7c:	688b      	ldr	r3, [r1, #8]
 8001f7e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001f80:	680b      	ldr	r3, [r1, #0]
 8001f82:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001f84:	4b09      	ldr	r3, [pc, #36]	; (8001fac <TIM_Base_SetConfig+0x88>)
 8001f86:	4298      	cmp	r0, r3
 8001f88:	d00b      	beq.n	8001fa2 <TIM_Base_SetConfig+0x7e>
 8001f8a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001f8e:	4298      	cmp	r0, r3
 8001f90:	d007      	beq.n	8001fa2 <TIM_Base_SetConfig+0x7e>
 8001f92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f96:	4298      	cmp	r0, r3
 8001f98:	d003      	beq.n	8001fa2 <TIM_Base_SetConfig+0x7e>
 8001f9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f9e:	4298      	cmp	r0, r3
 8001fa0:	d101      	bne.n	8001fa6 <TIM_Base_SetConfig+0x82>
    TIMx->RCR = Structure->RepetitionCounter;
 8001fa2:	690b      	ldr	r3, [r1, #16]
 8001fa4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	6143      	str	r3, [r0, #20]
 8001faa:	bd10      	pop	{r4, pc}
 8001fac:	40012c00 	.word	0x40012c00
 8001fb0:	40000400 	.word	0x40000400
 8001fb4:	40014000 	.word	0x40014000

08001fb8 <HAL_TIM_Base_Init>:
{ 
 8001fb8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001fba:	4604      	mov	r4, r0
 8001fbc:	b1a0      	cbz	r0, 8001fe8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001fbe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001fc2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001fc6:	b91b      	cbnz	r3, 8001fd0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001fc8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001fcc:	f001 fa9e 	bl	800350c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001fd6:	6820      	ldr	r0, [r4, #0]
 8001fd8:	1d21      	adds	r1, r4, #4
 8001fda:	f7ff ffa3 	bl	8001f24 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001fe8:	2001      	movs	r0, #1
}
 8001fea:	bd10      	pop	{r4, pc}

08001fec <HAL_TIM_PWM_Init>:
{
 8001fec:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001fee:	4604      	mov	r4, r0
 8001ff0:	b1a0      	cbz	r0, 800201c <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001ff2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001ff6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ffa:	b91b      	cbnz	r3, 8002004 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001ffc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002000:	f7ff feb8 	bl	8001d74 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002004:	2302      	movs	r3, #2
 8002006:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800200a:	6820      	ldr	r0, [r4, #0]
 800200c:	1d21      	adds	r1, r4, #4
 800200e:	f7ff ff89 	bl	8001f24 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002012:	2301      	movs	r3, #1
 8002014:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002018:	2000      	movs	r0, #0
 800201a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800201c:	2001      	movs	r0, #1
}
 800201e:	bd10      	pop	{r4, pc}

08002020 <HAL_TIM_Encoder_Init>:
{
 8002020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002022:	460c      	mov	r4, r1
  if(htim == NULL)
 8002024:	4605      	mov	r5, r0
 8002026:	2800      	cmp	r0, #0
 8002028:	d043      	beq.n	80020b2 <HAL_TIM_Encoder_Init+0x92>
  if(htim->State == HAL_TIM_STATE_RESET)
 800202a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800202e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002032:	b91b      	cbnz	r3, 800203c <HAL_TIM_Encoder_Init+0x1c>
    htim->Lock = HAL_UNLOCKED;
 8002034:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8002038:	f001 fa96 	bl	8003568 <HAL_TIM_Encoder_MspInit>
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800203c:	4629      	mov	r1, r5
  htim->State= HAL_TIM_STATE_BUSY;
 800203e:	2302      	movs	r3, #2
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002040:	f851 0b04 	ldr.w	r0, [r1], #4
  htim->State= HAL_TIM_STATE_BUSY;
 8002044:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002048:	6883      	ldr	r3, [r0, #8]
 800204a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800204e:	f023 0307 	bic.w	r3, r3, #7
 8002052:	6083      	str	r3, [r0, #8]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8002054:	f7ff ff66 	bl	8001f24 <TIM_Base_SetConfig>
  tmpsmcr = htim->Instance->SMCR;
 8002058:	6828      	ldr	r0, [r5, #0]
  tmpsmcr |= sConfig->EncoderMode;
 800205a:	6823      	ldr	r3, [r4, #0]
  tmpsmcr = htim->Instance->SMCR;
 800205c:	6886      	ldr	r6, [r0, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800205e:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002060:	68a1      	ldr	r1, [r4, #8]
  tmpccer = htim->Instance->CCER;
 8002062:	6a07      	ldr	r7, [r0, #32]
  tmpsmcr |= sConfig->EncoderMode;
 8002064:	431e      	orrs	r6, r3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002066:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002068:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800206c:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002070:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
 8002074:	4313      	orrs	r3, r2
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002076:	f423 427c 	bic.w	r2, r3, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800207a:	6923      	ldr	r3, [r4, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800207c:	69e1      	ldr	r1, [r4, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002084:	68e1      	ldr	r1, [r4, #12]
 8002086:	430b      	orrs	r3, r1
 8002088:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800208a:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800208e:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
 8002092:	4313      	orrs	r3, r2
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002094:	6961      	ldr	r1, [r4, #20]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002096:	f027 02aa 	bic.w	r2, r7, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800209a:	6867      	ldr	r7, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 800209c:	6086      	str	r6, [r0, #8]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800209e:	ea47 1701 	orr.w	r7, r7, r1, lsl #4
  htim->Instance->CCMR1 = tmpccmr1;
 80020a2:	6183      	str	r3, [r0, #24]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80020a4:	4317      	orrs	r7, r2
  htim->State= HAL_TIM_STATE_READY;
 80020a6:	2301      	movs	r3, #1
  htim->Instance->CCER = tmpccer;
 80020a8:	6207      	str	r7, [r0, #32]
  htim->State= HAL_TIM_STATE_READY;
 80020aa:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  return HAL_OK;
 80020ae:	2000      	movs	r0, #0
 80020b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80020b2:	2001      	movs	r0, #1
}
 80020b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080020b8 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80020b8:	6a03      	ldr	r3, [r0, #32]
 80020ba:	f023 0301 	bic.w	r3, r3, #1
 80020be:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80020c0:	6a03      	ldr	r3, [r0, #32]
{
 80020c2:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2; 
 80020c4:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80020c6:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 80020c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80020ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020ce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80020d2:	432a      	orrs	r2, r5
  tmpccer |= OC_Config->OCPolarity;
 80020d4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80020d6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80020da:	432b      	orrs	r3, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020dc:	4d17      	ldr	r5, [pc, #92]	; (800213c <TIM_OC1_SetConfig+0x84>)
 80020de:	42a8      	cmp	r0, r5
 80020e0:	d00b      	beq.n	80020fa <TIM_OC1_SetConfig+0x42>
 80020e2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80020e6:	42a8      	cmp	r0, r5
 80020e8:	d007      	beq.n	80020fa <TIM_OC1_SetConfig+0x42>
 80020ea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020ee:	42a8      	cmp	r0, r5
 80020f0:	d003      	beq.n	80020fa <TIM_OC1_SetConfig+0x42>
 80020f2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80020f6:	42a8      	cmp	r0, r5
 80020f8:	d11a      	bne.n	8002130 <TIM_OC1_SetConfig+0x78>
    tmpccer |= OC_Config->OCNPolarity;
 80020fa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80020fc:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002100:	432b      	orrs	r3, r5
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002102:	4d0e      	ldr	r5, [pc, #56]	; (800213c <TIM_OC1_SetConfig+0x84>)
 8002104:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8002106:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800210a:	d00b      	beq.n	8002124 <TIM_OC1_SetConfig+0x6c>
 800210c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002110:	42a8      	cmp	r0, r5
 8002112:	d007      	beq.n	8002124 <TIM_OC1_SetConfig+0x6c>
 8002114:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002118:	42a8      	cmp	r0, r5
 800211a:	d003      	beq.n	8002124 <TIM_OC1_SetConfig+0x6c>
 800211c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002120:	42a8      	cmp	r0, r5
 8002122:	d105      	bne.n	8002130 <TIM_OC1_SetConfig+0x78>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002124:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8002128:	698e      	ldr	r6, [r1, #24]
 800212a:	694c      	ldr	r4, [r1, #20]
 800212c:	4334      	orrs	r4, r6
 800212e:	432c      	orrs	r4, r5
  TIMx->CR2 = tmpcr2;
 8002130:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002132:	6182      	str	r2, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8002134:	684a      	ldr	r2, [r1, #4]
 8002136:	6342      	str	r2, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;  
 8002138:	6203      	str	r3, [r0, #32]
 800213a:	bd70      	pop	{r4, r5, r6, pc}
 800213c:	40012c00 	.word	0x40012c00

08002140 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002140:	6a03      	ldr	r3, [r0, #32]
 8002142:	f023 0310 	bic.w	r3, r3, #16
 8002146:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002148:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 800214a:	6842      	ldr	r2, [r0, #4]
{
 800214c:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 800214e:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002150:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002152:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8002156:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800215a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800215e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002160:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002164:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002168:	4d10      	ldr	r5, [pc, #64]	; (80021ac <TIM_OC2_SetConfig+0x6c>)
 800216a:	42a8      	cmp	r0, r5
 800216c:	d10e      	bne.n	800218c <TIM_OC2_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800216e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8002170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002174:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800217c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800217e:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002180:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002184:	4335      	orrs	r5, r6
 8002186:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 800218a:	e009      	b.n	80021a0 <TIM_OC2_SetConfig+0x60>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800218c:	4d08      	ldr	r5, [pc, #32]	; (80021b0 <TIM_OC2_SetConfig+0x70>)
 800218e:	42a8      	cmp	r0, r5
 8002190:	d0f4      	beq.n	800217c <TIM_OC2_SetConfig+0x3c>
 8002192:	4d08      	ldr	r5, [pc, #32]	; (80021b4 <TIM_OC2_SetConfig+0x74>)
 8002194:	42a8      	cmp	r0, r5
 8002196:	d0f1      	beq.n	800217c <TIM_OC2_SetConfig+0x3c>
 8002198:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800219c:	42a8      	cmp	r0, r5
 800219e:	d0ed      	beq.n	800217c <TIM_OC2_SetConfig+0x3c>
  TIMx->CR2 = tmpcr2;
 80021a0:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80021a2:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80021a4:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80021a6:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;  
 80021a8:	6203      	str	r3, [r0, #32]
}
 80021aa:	bd70      	pop	{r4, r5, r6, pc}
 80021ac:	40012c00 	.word	0x40012c00
 80021b0:	40014000 	.word	0x40014000
 80021b4:	40014400 	.word	0x40014400

080021b8 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80021b8:	6a03      	ldr	r3, [r0, #32]
 80021ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021be:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80021c0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2; 
 80021c2:	6842      	ldr	r2, [r0, #4]
{
 80021c4:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR2;
 80021c6:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 80021c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 80021ca:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80021ce:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80021d2:	432c      	orrs	r4, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021d4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80021d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80021da:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80021de:	4d11      	ldr	r5, [pc, #68]	; (8002224 <TIM_OC3_SetConfig+0x6c>)
 80021e0:	42a8      	cmp	r0, r5
 80021e2:	d10e      	bne.n	8002202 <TIM_OC3_SetConfig+0x4a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021e4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80021e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80021ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80021ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80021f2:	694d      	ldr	r5, [r1, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021f4:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80021f6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80021fa:	4335      	orrs	r5, r6
 80021fc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8002200:	e009      	b.n	8002216 <TIM_OC3_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002202:	4d09      	ldr	r5, [pc, #36]	; (8002228 <TIM_OC3_SetConfig+0x70>)
 8002204:	42a8      	cmp	r0, r5
 8002206:	d0f4      	beq.n	80021f2 <TIM_OC3_SetConfig+0x3a>
 8002208:	4d08      	ldr	r5, [pc, #32]	; (800222c <TIM_OC3_SetConfig+0x74>)
 800220a:	42a8      	cmp	r0, r5
 800220c:	d0f1      	beq.n	80021f2 <TIM_OC3_SetConfig+0x3a>
 800220e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002212:	42a8      	cmp	r0, r5
 8002214:	d0ed      	beq.n	80021f2 <TIM_OC3_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 8002216:	6042      	str	r2, [r0, #4]
  TIMx->CCR3 = OC_Config->Pulse;
 8002218:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800221a:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800221c:	63c2      	str	r2, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;  
 800221e:	6203      	str	r3, [r0, #32]
}
 8002220:	bd70      	pop	{r4, r5, r6, pc}
 8002222:	bf00      	nop
 8002224:	40012c00 	.word	0x40012c00
 8002228:	40014000 	.word	0x40014000
 800222c:	40014400 	.word	0x40014400

08002230 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002230:	6a03      	ldr	r3, [r0, #32]
 8002232:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002236:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002238:	6a02      	ldr	r2, [r0, #32]
{
 800223a:	b530      	push	{r4, r5, lr}
  tmpcr2 =  TIMx->CR2; 
 800223c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 800223e:	69c3      	ldr	r3, [r0, #28]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002240:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002246:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800224a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800224e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002250:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002254:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002258:	4d0c      	ldr	r5, [pc, #48]	; (800228c <TIM_OC4_SetConfig+0x5c>)
 800225a:	42a8      	cmp	r0, r5
 800225c:	d00b      	beq.n	8002276 <TIM_OC4_SetConfig+0x46>
 800225e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002262:	42a8      	cmp	r0, r5
 8002264:	d007      	beq.n	8002276 <TIM_OC4_SetConfig+0x46>
 8002266:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800226a:	42a8      	cmp	r0, r5
 800226c:	d003      	beq.n	8002276 <TIM_OC4_SetConfig+0x46>
 800226e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002272:	42a8      	cmp	r0, r5
 8002274:	d104      	bne.n	8002280 <TIM_OC4_SetConfig+0x50>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002276:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002278:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800227c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  TIMx->CR2 = tmpcr2;
 8002280:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8002282:	61c3      	str	r3, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8002284:	684b      	ldr	r3, [r1, #4]
 8002286:	6403      	str	r3, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;  
 8002288:	6202      	str	r2, [r0, #32]
 800228a:	bd30      	pop	{r4, r5, pc}
 800228c:	40012c00 	.word	0x40012c00

08002290 <TIM_ETR_SetConfig>:
{
 8002290:	b510      	push	{r4, lr}
  tmpsmcr = TIMx->SMCR;
 8002292:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002294:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002296:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800229a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800229e:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 80022a0:	6083      	str	r3, [r0, #8]
 80022a2:	bd10      	pop	{r4, pc}

080022a4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80022a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022a8:	2b01      	cmp	r3, #1
{
 80022aa:	b570      	push	{r4, r5, r6, lr}
 80022ac:	4604      	mov	r4, r0
 80022ae:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80022b2:	d01a      	beq.n	80022ea <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 80022b4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80022b8:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80022ba:	2301      	movs	r3, #1
 80022bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80022c0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022c2:	4b52      	ldr	r3, [pc, #328]	; (800240c <HAL_TIM_ConfigClockSource+0x168>)
 80022c4:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80022c6:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80022c8:	680b      	ldr	r3, [r1, #0]
 80022ca:	2b40      	cmp	r3, #64	; 0x40
 80022cc:	d075      	beq.n	80023ba <HAL_TIM_ConfigClockSource+0x116>
 80022ce:	d818      	bhi.n	8002302 <HAL_TIM_ConfigClockSource+0x5e>
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	f000 808f 	beq.w	80023f4 <HAL_TIM_ConfigClockSource+0x150>
 80022d6:	d809      	bhi.n	80022ec <HAL_TIM_ConfigClockSource+0x48>
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 8085 	beq.w	80023e8 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 80022de:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80022e0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80022e2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80022e6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80022ea:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	f000 8087 	beq.w	8002400 <HAL_TIM_ConfigClockSource+0x15c>
 80022f2:	2b30      	cmp	r3, #48	; 0x30
 80022f4:	d1f3      	bne.n	80022de <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 80022f6:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80022f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80022fc:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002300:	e033      	b.n	800236a <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002302:	2b70      	cmp	r3, #112	; 0x70
 8002304:	d033      	beq.n	800236e <HAL_TIM_ConfigClockSource+0xca>
 8002306:	d81b      	bhi.n	8002340 <HAL_TIM_ConfigClockSource+0x9c>
 8002308:	2b50      	cmp	r3, #80	; 0x50
 800230a:	d03f      	beq.n	800238c <HAL_TIM_ConfigClockSource+0xe8>
 800230c:	2b60      	cmp	r3, #96	; 0x60
 800230e:	d1e6      	bne.n	80022de <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002310:	684d      	ldr	r5, [r1, #4]
 8002312:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002314:	6a01      	ldr	r1, [r0, #32]
 8002316:	f021 0110 	bic.w	r1, r1, #16
 800231a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800231c:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800231e:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002320:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002324:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002328:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800232c:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002330:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002332:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8002334:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800233a:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800233e:	e014      	b.n	800236a <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8002340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002344:	d00c      	beq.n	8002360 <HAL_TIM_ConfigClockSource+0xbc>
 8002346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800234a:	d1c8      	bne.n	80022de <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 800234c:	68cb      	ldr	r3, [r1, #12]
 800234e:	684a      	ldr	r2, [r1, #4]
 8002350:	6889      	ldr	r1, [r1, #8]
 8002352:	f7ff ff9d 	bl	8002290 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002356:	6822      	ldr	r2, [r4, #0]
 8002358:	6893      	ldr	r3, [r2, #8]
 800235a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800235e:	e013      	b.n	8002388 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002360:	6883      	ldr	r3, [r0, #8]
 8002362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002366:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 800236a:	6083      	str	r3, [r0, #8]
 800236c:	e7b7      	b.n	80022de <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 800236e:	68cb      	ldr	r3, [r1, #12]
 8002370:	684a      	ldr	r2, [r1, #4]
 8002372:	6889      	ldr	r1, [r1, #8]
 8002374:	f7ff ff8c 	bl	8002290 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002378:	6822      	ldr	r2, [r4, #0]
 800237a:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800237c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002380:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002384:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002388:	6093      	str	r3, [r2, #8]
    break;
 800238a:	e7a8      	b.n	80022de <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800238c:	684a      	ldr	r2, [r1, #4]
 800238e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002390:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002392:	6a05      	ldr	r5, [r0, #32]
 8002394:	f025 0501 	bic.w	r5, r5, #1
 8002398:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800239a:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800239c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023a4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80023a8:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80023aa:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80023ac:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80023ae:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80023b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80023b4:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 80023b8:	e7d7      	b.n	800236a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80023ba:	684a      	ldr	r2, [r1, #4]
 80023bc:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80023be:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80023c0:	6a05      	ldr	r5, [r0, #32]
 80023c2:	f025 0501 	bic.w	r5, r5, #1
 80023c6:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80023c8:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023ca:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023d2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80023d6:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80023d8:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80023da:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80023dc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80023de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80023e2:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80023e6:	e7c0      	b.n	800236a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 80023e8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80023ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80023ee:	f043 0307 	orr.w	r3, r3, #7
 80023f2:	e7ba      	b.n	800236a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 80023f4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80023f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80023fa:	f043 0317 	orr.w	r3, r3, #23
 80023fe:	e7b4      	b.n	800236a <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8002400:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8002402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002406:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800240a:	e7ae      	b.n	800236a <HAL_TIM_ConfigClockSource+0xc6>
 800240c:	fffe0088 	.word	0xfffe0088

08002410 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8002410:	6a03      	ldr	r3, [r0, #32]
{
 8002412:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8002414:	2401      	movs	r4, #1
 8002416:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002418:	ea23 0304 	bic.w	r3, r3, r4
 800241c:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800241e:	6a03      	ldr	r3, [r0, #32]
 8002420:	408a      	lsls	r2, r1
 8002422:	431a      	orrs	r2, r3
 8002424:	6202      	str	r2, [r0, #32]
 8002426:	bd10      	pop	{r4, pc}

08002428 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002428:	6a03      	ldr	r3, [r0, #32]
 800242a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002430:	6a02      	ldr	r2, [r0, #32]
{
 8002432:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002434:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002436:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002438:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800243a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8002442:	432b      	orrs	r3, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002444:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8002446:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800244a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800244e:	4d0d      	ldr	r5, [pc, #52]	; (8002484 <TIM_OC5_SetConfig+0x5c>)
 8002450:	42a8      	cmp	r0, r5
 8002452:	d00b      	beq.n	800246c <TIM_OC5_SetConfig+0x44>
 8002454:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8002458:	42a8      	cmp	r0, r5
 800245a:	d007      	beq.n	800246c <TIM_OC5_SetConfig+0x44>
 800245c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002460:	42a8      	cmp	r0, r5
 8002462:	d003      	beq.n	800246c <TIM_OC5_SetConfig+0x44>
 8002464:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002468:	42a8      	cmp	r0, r5
 800246a:	d104      	bne.n	8002476 <TIM_OC5_SetConfig+0x4e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800246c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 800246e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002472:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002476:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002478:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800247a:	684b      	ldr	r3, [r1, #4]
 800247c:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800247e:	6202      	str	r2, [r0, #32]
 8002480:	bd30      	pop	{r4, r5, pc}
 8002482:	bf00      	nop
 8002484:	40012c00 	.word	0x40012c00

08002488 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002488:	6a03      	ldr	r3, [r0, #32]
 800248a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800248e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002490:	6a02      	ldr	r2, [r0, #32]
{
 8002492:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002494:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002496:	6d43      	ldr	r3, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002498:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800249a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800249e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024a2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80024a6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80024a8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80024ac:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80024b0:	4d0c      	ldr	r5, [pc, #48]	; (80024e4 <TIM_OC6_SetConfig+0x5c>)
 80024b2:	42a8      	cmp	r0, r5
 80024b4:	d00b      	beq.n	80024ce <TIM_OC6_SetConfig+0x46>
 80024b6:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 80024ba:	42a8      	cmp	r0, r5
 80024bc:	d007      	beq.n	80024ce <TIM_OC6_SetConfig+0x46>
 80024be:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024c2:	42a8      	cmp	r0, r5
 80024c4:	d003      	beq.n	80024ce <TIM_OC6_SetConfig+0x46>
 80024c6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80024ca:	42a8      	cmp	r0, r5
 80024cc:	d104      	bne.n	80024d8 <TIM_OC6_SetConfig+0x50>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80024ce:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80024d0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80024d4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d8:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024da:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80024dc:	684b      	ldr	r3, [r1, #4]
 80024de:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80024e0:	6202      	str	r2, [r0, #32]
 80024e2:	bd30      	pop	{r4, r5, pc}
 80024e4:	40012c00 	.word	0x40012c00

080024e8 <HAL_TIM_PWM_ConfigChannel>:
{
 80024e8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80024ea:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80024ee:	2b01      	cmp	r3, #1
{
 80024f0:	4604      	mov	r4, r0
 80024f2:	460d      	mov	r5, r1
 80024f4:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80024f8:	d010      	beq.n	800251c <HAL_TIM_PWM_ConfigChannel+0x34>
 80024fa:	2301      	movs	r3, #1
  switch (Channel)
 80024fc:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80024fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002502:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8002506:	d043      	beq.n	8002590 <HAL_TIM_PWM_ConfigChannel+0xa8>
 8002508:	d809      	bhi.n	800251e <HAL_TIM_PWM_ConfigChannel+0x36>
 800250a:	b1fa      	cbz	r2, 800254c <HAL_TIM_PWM_ConfigChannel+0x64>
 800250c:	2a04      	cmp	r2, #4
 800250e:	d02e      	beq.n	800256e <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 8002510:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002512:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002514:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002518:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800251c:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800251e:	2a10      	cmp	r2, #16
 8002520:	d047      	beq.n	80025b2 <HAL_TIM_PWM_ConfigChannel+0xca>
 8002522:	2a14      	cmp	r2, #20
 8002524:	d056      	beq.n	80025d4 <HAL_TIM_PWM_ConfigChannel+0xec>
 8002526:	2a0c      	cmp	r2, #12
 8002528:	d1f2      	bne.n	8002510 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800252a:	6820      	ldr	r0, [r4, #0]
 800252c:	f7ff fe80 	bl	8002230 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002530:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002532:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002534:	69da      	ldr	r2, [r3, #28]
 8002536:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800253a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800253c:	69da      	ldr	r2, [r3, #28]
 800253e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002542:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002544:	69da      	ldr	r2, [r3, #28]
 8002546:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800254a:	e030      	b.n	80025ae <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800254c:	6820      	ldr	r0, [r4, #0]
 800254e:	f7ff fdb3 	bl	80020b8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002552:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002554:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002556:	699a      	ldr	r2, [r3, #24]
 8002558:	f042 0208 	orr.w	r2, r2, #8
 800255c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800255e:	699a      	ldr	r2, [r3, #24]
 8002560:	f022 0204 	bic.w	r2, r2, #4
 8002564:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800256a:	619a      	str	r2, [r3, #24]
    break;
 800256c:	e7d0      	b.n	8002510 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800256e:	6820      	ldr	r0, [r4, #0]
 8002570:	f7ff fde6 	bl	8002140 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002574:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002576:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002578:	699a      	ldr	r2, [r3, #24]
 800257a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800257e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002580:	699a      	ldr	r2, [r3, #24]
 8002582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002588:	699a      	ldr	r2, [r3, #24]
 800258a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800258e:	e7ec      	b.n	800256a <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002590:	6820      	ldr	r0, [r4, #0]
 8002592:	f7ff fe11 	bl	80021b8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002596:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002598:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800259a:	69da      	ldr	r2, [r3, #28]
 800259c:	f042 0208 	orr.w	r2, r2, #8
 80025a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80025a2:	69da      	ldr	r2, [r3, #28]
 80025a4:	f022 0204 	bic.w	r2, r2, #4
 80025a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 80025aa:	69da      	ldr	r2, [r3, #28]
 80025ac:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80025ae:	61da      	str	r2, [r3, #28]
    break;
 80025b0:	e7ae      	b.n	8002510 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80025b2:	6820      	ldr	r0, [r4, #0]
 80025b4:	f7ff ff38 	bl	8002428 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80025b8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80025ba:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80025bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025be:	f042 0208 	orr.w	r2, r2, #8
 80025c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80025c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025c6:	f022 0204 	bic.w	r2, r2, #4
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 80025cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025ce:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 80025d2:	e79d      	b.n	8002510 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80025d4:	6820      	ldr	r0, [r4, #0]
 80025d6:	f7ff ff57 	bl	8002488 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80025da:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 80025dc:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80025de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80025e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 80025ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025f4:	e7ec      	b.n	80025d0 <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

080025f8 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80025f8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80025fc:	2b01      	cmp	r3, #1
{
 80025fe:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002600:	d018      	beq.n	8002634 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 = htim->Instance->CR2;
 8002602:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002604:	4d0c      	ldr	r5, [pc, #48]	; (8002638 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8002606:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002608:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800260a:	42aa      	cmp	r2, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800260c:	bf02      	ittt	eq
 800260e:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002610:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002614:	432b      	orreq	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002616:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002618:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800261a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800261e:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002620:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 8002624:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002626:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 8002628:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800262a:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 800262c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8002630:	4618      	mov	r0, r3
 8002632:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8002634:	2002      	movs	r0, #2
} 
 8002636:	bd30      	pop	{r4, r5, pc}
 8002638:	40012c00 	.word	0x40012c00

0800263c <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 800263c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002640:	2b01      	cmp	r3, #1
{
 8002642:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002644:	d034      	beq.n	80026b0 <HAL_TIMEx_ConfigBreakDeadTime+0x74>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002646:	68cb      	ldr	r3, [r1, #12]
 8002648:	688a      	ldr	r2, [r1, #8]
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800264a:	4c1a      	ldr	r4, [pc, #104]	; (80026b4 <HAL_TIMEx_ConfigBreakDeadTime+0x78>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800264c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002650:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002652:	684a      	ldr	r2, [r1, #4]
 8002654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002658:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800265a:	680a      	ldr	r2, [r1, #0]
 800265c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002660:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002662:	690a      	ldr	r2, [r1, #16]
 8002664:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002668:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800266a:	694a      	ldr	r2, [r1, #20]
 800266c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002670:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002672:	6a8a      	ldr	r2, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002674:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002678:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << BDTR_BKF_SHIFT));
 800267a:	698a      	ldr	r2, [r1, #24]
 800267c:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8002680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8002684:	6802      	ldr	r2, [r0, #0]
 8002686:	42a2      	cmp	r2, r4
 8002688:	d10c      	bne.n	80026a4 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << BDTR_BK2F_SHIFT));
 800268a:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800268c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002690:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002694:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8002696:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8002698:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800269c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800269e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80026a2:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 80026a4:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80026a6:	2300      	movs	r3, #0
 80026a8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80026ac:	4618      	mov	r0, r3
 80026ae:	bd10      	pop	{r4, pc}
  __HAL_LOCK(htim);
 80026b0:	2002      	movs	r0, #2
}
 80026b2:	bd10      	pop	{r4, pc}
 80026b4:	40012c00 	.word	0x40012c00

080026b8 <HAL_TIMEx_CommutationCallback>:
 80026b8:	4770      	bx	lr

080026ba <HAL_TIMEx_BreakCallback>:
 80026ba:	4770      	bx	lr

080026bc <HAL_TIMEx_Break2Callback>:
{
 80026bc:	4770      	bx	lr

080026be <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026be:	6803      	ldr	r3, [r0, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026c6:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	f022 0201 	bic.w	r2, r2, #1
 80026ce:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026d0:	2320      	movs	r3, #32
 80026d2:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80026d6:	4770      	bx	lr

080026d8 <HAL_UART_TxCpltCallback>:
 80026d8:	4770      	bx	lr

080026da <HAL_UART_RxCpltCallback>:
 80026da:	4770      	bx	lr

080026dc <HAL_UART_ErrorCallback>:
 80026dc:	4770      	bx	lr

080026de <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80026de:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80026e0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80026e8:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 80026ec:	f7ff fff6 	bl	80026dc <HAL_UART_ErrorCallback>
 80026f0:	bd08      	pop	{r3, pc}
	...

080026f4 <UART_SetConfig>:
{
 80026f4:	b538      	push	{r3, r4, r5, lr}
 80026f6:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80026f8:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026fa:	6921      	ldr	r1, [r4, #16]
 80026fc:	68a3      	ldr	r3, [r4, #8]
 80026fe:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002700:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002702:	430b      	orrs	r3, r1
 8002704:	6961      	ldr	r1, [r4, #20]
 8002706:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002708:	4949      	ldr	r1, [pc, #292]	; (8002830 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800270a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800270c:	4001      	ands	r1, r0
 800270e:	430b      	orrs	r3, r1
 8002710:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002712:	686b      	ldr	r3, [r5, #4]
 8002714:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002716:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002718:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800271c:	430b      	orrs	r3, r1
 800271e:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002720:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002722:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002724:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002728:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800272a:	430b      	orrs	r3, r1
 800272c:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800272e:	4b41      	ldr	r3, [pc, #260]	; (8002834 <UART_SetConfig+0x140>)
 8002730:	429d      	cmp	r5, r3
 8002732:	d112      	bne.n	800275a <UART_SetConfig+0x66>
 8002734:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002738:	493f      	ldr	r1, [pc, #252]	; (8002838 <UART_SetConfig+0x144>)
 800273a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273c:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002740:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002744:	5ccb      	ldrb	r3, [r1, r3]
 8002746:	d13b      	bne.n	80027c0 <UART_SetConfig+0xcc>
    switch (clocksource)
 8002748:	2b08      	cmp	r3, #8
 800274a:	d836      	bhi.n	80027ba <UART_SetConfig+0xc6>
 800274c:	e8df f003 	tbb	[pc, r3]
 8002750:	3524210f 	.word	0x3524210f
 8002754:	3535352d 	.word	0x3535352d
 8002758:	30          	.byte	0x30
 8002759:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800275a:	4b38      	ldr	r3, [pc, #224]	; (800283c <UART_SetConfig+0x148>)
 800275c:	429d      	cmp	r5, r3
 800275e:	d003      	beq.n	8002768 <UART_SetConfig+0x74>
 8002760:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002764:	429d      	cmp	r5, r3
 8002766:	d15e      	bne.n	8002826 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002768:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800276c:	d131      	bne.n	80027d2 <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800276e:	f7ff fa03 	bl	8001b78 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002772:	6861      	ldr	r1, [r4, #4]
 8002774:	084a      	lsrs	r2, r1, #1
 8002776:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800277a:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800277e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002780:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8002782:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8002786:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002788:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800278c:	4313      	orrs	r3, r2
 800278e:	60cb      	str	r3, [r1, #12]
 8002790:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002792:	f7ff fa09 	bl	8001ba8 <HAL_RCC_GetPCLK2Freq>
 8002796:	e7ec      	b.n	8002772 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002798:	6860      	ldr	r0, [r4, #4]
 800279a:	0843      	lsrs	r3, r0, #1
 800279c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80027a0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80027a4:	fbb3 f3f0 	udiv	r3, r3, r0
 80027a8:	e7e9      	b.n	800277e <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80027aa:	f7ff f8eb 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 80027ae:	e7e0      	b.n	8002772 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80027b0:	6860      	ldr	r0, [r4, #4]
 80027b2:	0843      	lsrs	r3, r0, #1
 80027b4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80027b8:	e7f4      	b.n	80027a4 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 80027ba:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80027bc:	2300      	movs	r3, #0
 80027be:	e7e0      	b.n	8002782 <UART_SetConfig+0x8e>
    switch (clocksource)
 80027c0:	2b08      	cmp	r3, #8
 80027c2:	d833      	bhi.n	800282c <UART_SetConfig+0x138>
 80027c4:	e8df f003 	tbb	[pc, r3]
 80027c8:	321b1005 	.word	0x321b1005
 80027cc:	32323227 	.word	0x32323227
 80027d0:	2a          	.byte	0x2a
 80027d1:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80027d2:	f7ff f9d1 	bl	8001b78 <HAL_RCC_GetPCLK1Freq>
 80027d6:	6863      	ldr	r3, [r4, #4]
 80027d8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80027dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80027e0:	b280      	uxth	r0, r0
 80027e2:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80027e4:	2000      	movs	r0, #0
        break;
 80027e6:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80027e8:	f7ff f9de 	bl	8001ba8 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80027ec:	6863      	ldr	r3, [r4, #4]
 80027ee:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80027f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80027f6:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <UART_SetConfig+0x140>)
 80027f8:	b280      	uxth	r0, r0
 80027fa:	60d8      	str	r0, [r3, #12]
 80027fc:	e7f2      	b.n	80027e4 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80027fe:	6862      	ldr	r2, [r4, #4]
 8002800:	0853      	lsrs	r3, r2, #1
 8002802:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002806:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800280a:	fbb3 f3f2 	udiv	r3, r3, r2
 800280e:	4a09      	ldr	r2, [pc, #36]	; (8002834 <UART_SetConfig+0x140>)
 8002810:	b29b      	uxth	r3, r3
 8002812:	60d3      	str	r3, [r2, #12]
 8002814:	e7e6      	b.n	80027e4 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002816:	f7ff f8b5 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 800281a:	e7e7      	b.n	80027ec <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800281c:	6862      	ldr	r2, [r4, #4]
 800281e:	0853      	lsrs	r3, r2, #1
 8002820:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002824:	e7f1      	b.n	800280a <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002826:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800282a:	d0c6      	beq.n	80027ba <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 800282c:	2001      	movs	r0, #1
  return ret;
 800282e:	bd38      	pop	{r3, r4, r5, pc}
 8002830:	efff69f3 	.word	0xefff69f3
 8002834:	40013800 	.word	0x40013800
 8002838:	08003924 	.word	0x08003924
 800283c:	40004400 	.word	0x40004400

08002840 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002840:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002842:	07da      	lsls	r2, r3, #31
{
 8002844:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002846:	d506      	bpl.n	8002856 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002848:	6801      	ldr	r1, [r0, #0]
 800284a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800284c:	684a      	ldr	r2, [r1, #4]
 800284e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002852:	4322      	orrs	r2, r4
 8002854:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002856:	079c      	lsls	r4, r3, #30
 8002858:	d506      	bpl.n	8002868 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800285a:	6801      	ldr	r1, [r0, #0]
 800285c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800285e:	684a      	ldr	r2, [r1, #4]
 8002860:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002864:	4322      	orrs	r2, r4
 8002866:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002868:	0759      	lsls	r1, r3, #29
 800286a:	d506      	bpl.n	800287a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800286c:	6801      	ldr	r1, [r0, #0]
 800286e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002870:	684a      	ldr	r2, [r1, #4]
 8002872:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002876:	4322      	orrs	r2, r4
 8002878:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800287a:	071a      	lsls	r2, r3, #28
 800287c:	d506      	bpl.n	800288c <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800287e:	6801      	ldr	r1, [r0, #0]
 8002880:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002882:	684a      	ldr	r2, [r1, #4]
 8002884:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002888:	4322      	orrs	r2, r4
 800288a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800288c:	06dc      	lsls	r4, r3, #27
 800288e:	d506      	bpl.n	800289e <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002890:	6801      	ldr	r1, [r0, #0]
 8002892:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002894:	688a      	ldr	r2, [r1, #8]
 8002896:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800289a:	4322      	orrs	r2, r4
 800289c:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800289e:	0699      	lsls	r1, r3, #26
 80028a0:	d506      	bpl.n	80028b0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028a2:	6801      	ldr	r1, [r0, #0]
 80028a4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80028a6:	688a      	ldr	r2, [r1, #8]
 80028a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028ac:	4322      	orrs	r2, r4
 80028ae:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028b0:	065a      	lsls	r2, r3, #25
 80028b2:	d50f      	bpl.n	80028d4 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028b4:	6801      	ldr	r1, [r0, #0]
 80028b6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80028b8:	684a      	ldr	r2, [r1, #4]
 80028ba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80028be:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028c0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028c4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80028c6:	d105      	bne.n	80028d4 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80028c8:	684a      	ldr	r2, [r1, #4]
 80028ca:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80028cc:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80028d0:	4322      	orrs	r2, r4
 80028d2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028d4:	061b      	lsls	r3, r3, #24
 80028d6:	d506      	bpl.n	80028e6 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028d8:	6802      	ldr	r2, [r0, #0]
 80028da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80028dc:	6853      	ldr	r3, [r2, #4]
 80028de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80028e2:	430b      	orrs	r3, r1
 80028e4:	6053      	str	r3, [r2, #4]
 80028e6:	bd10      	pop	{r4, pc}

080028e8 <UART_WaitOnFlagUntilTimeout>:
{
 80028e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028ec:	9d06      	ldr	r5, [sp, #24]
 80028ee:	4604      	mov	r4, r0
 80028f0:	460f      	mov	r7, r1
 80028f2:	4616      	mov	r6, r2
 80028f4:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f6:	6821      	ldr	r1, [r4, #0]
 80028f8:	69ca      	ldr	r2, [r1, #28]
 80028fa:	ea37 0302 	bics.w	r3, r7, r2
 80028fe:	bf0c      	ite	eq
 8002900:	2201      	moveq	r2, #1
 8002902:	2200      	movne	r2, #0
 8002904:	42b2      	cmp	r2, r6
 8002906:	d002      	beq.n	800290e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002908:	2000      	movs	r0, #0
}
 800290a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800290e:	1c6b      	adds	r3, r5, #1
 8002910:	d0f2      	beq.n	80028f8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002912:	b99d      	cbnz	r5, 800293c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002914:	6823      	ldr	r3, [r4, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800291c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8002926:	2320      	movs	r3, #32
 8002928:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800292c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8002930:	2300      	movs	r3, #0
 8002932:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8002936:	2003      	movs	r0, #3
 8002938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800293c:	f7fe f8a0 	bl	8000a80 <HAL_GetTick>
 8002940:	eba0 0008 	sub.w	r0, r0, r8
 8002944:	4285      	cmp	r5, r0
 8002946:	d2d6      	bcs.n	80028f6 <UART_WaitOnFlagUntilTimeout+0xe>
 8002948:	e7e4      	b.n	8002914 <UART_WaitOnFlagUntilTimeout+0x2c>

0800294a <UART_CheckIdleState>:
{
 800294a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800294c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800294e:	2600      	movs	r6, #0
 8002950:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8002952:	f7fe f895 	bl	8000a80 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002956:	6823      	ldr	r3, [r4, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800295c:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800295e:	d417      	bmi.n	8002990 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002960:	6823      	ldr	r3, [r4, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	075b      	lsls	r3, r3, #29
 8002966:	d50a      	bpl.n	800297e <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2200      	movs	r2, #0
 8002970:	462b      	mov	r3, r5
 8002972:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002976:	4620      	mov	r0, r4
 8002978:	f7ff ffb6 	bl	80028e8 <UART_WaitOnFlagUntilTimeout>
 800297c:	b9a0      	cbnz	r0, 80029a8 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 800297e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002980:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8002982:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8002986:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800298a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 800298e:	e00c      	b.n	80029aa <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002990:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	4632      	mov	r2, r6
 8002998:	4603      	mov	r3, r0
 800299a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800299e:	4620      	mov	r0, r4
 80029a0:	f7ff ffa2 	bl	80028e8 <UART_WaitOnFlagUntilTimeout>
 80029a4:	2800      	cmp	r0, #0
 80029a6:	d0db      	beq.n	8002960 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80029a8:	2003      	movs	r0, #3
}
 80029aa:	b002      	add	sp, #8
 80029ac:	bd70      	pop	{r4, r5, r6, pc}

080029ae <HAL_UART_Init>:
{
 80029ae:	b510      	push	{r4, lr}
  if(huart == NULL)
 80029b0:	4604      	mov	r4, r0
 80029b2:	b360      	cbz	r0, 8002a0e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80029b4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80029b8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80029bc:	b91b      	cbnz	r3, 80029c6 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80029be:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80029c2:	f000 fe21 	bl	8003608 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80029c6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80029c8:	2324      	movs	r3, #36	; 0x24
 80029ca:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80029ce:	6813      	ldr	r3, [r2, #0]
 80029d0:	f023 0301 	bic.w	r3, r3, #1
 80029d4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029d6:	4620      	mov	r0, r4
 80029d8:	f7ff fe8c 	bl	80026f4 <UART_SetConfig>
 80029dc:	2801      	cmp	r0, #1
 80029de:	d016      	beq.n	8002a0e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029e2:	b113      	cbz	r3, 80029ea <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80029e4:	4620      	mov	r0, r4
 80029e6:	f7ff ff2b 	bl	8002840 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029fa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002a02:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002a04:	601a      	str	r2, [r3, #0]
}
 8002a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002a0a:	f7ff bf9e 	b.w	800294a <UART_CheckIdleState>
}
 8002a0e:	2001      	movs	r0, #1
 8002a10:	bd10      	pop	{r4, pc}

08002a12 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a12:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002a16:	2b21      	cmp	r3, #33	; 0x21
 8002a18:	d127      	bne.n	8002a6a <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 8002a1a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002a1e:	6802      	ldr	r2, [r0, #0]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	b94b      	cbnz	r3, 8002a38 <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002a24:	6811      	ldr	r1, [r2, #0]
 8002a26:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8002a2a:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a2c:	6811      	ldr	r1, [r2, #0]
 8002a2e:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002a32:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8002a34:	2000      	movs	r0, #0
 8002a36:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a38:	6883      	ldr	r3, [r0, #8]
 8002a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002a40:	d10e      	bne.n	8002a60 <UART_Transmit_IT+0x4e>
 8002a42:	6901      	ldr	r1, [r0, #16]
 8002a44:	b961      	cbnz	r1, 8002a60 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8002a46:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002a4a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002a4e:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8002a50:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002a52:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8002a5e:	e7e9      	b.n	8002a34 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8002a60:	1c59      	adds	r1, r3, #1
 8002a62:	64c1      	str	r1, [r0, #76]	; 0x4c
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	8513      	strh	r3, [r2, #40]	; 0x28
 8002a68:	e7f3      	b.n	8002a52 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8002a6a:	2002      	movs	r0, #2
  }
}
 8002a6c:	4770      	bx	lr

08002a6e <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a6e:	6801      	ldr	r1, [r0, #0]
{
 8002a70:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002a72:	680b      	ldr	r3, [r1, #0]
 8002a74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a78:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a7a:	2320      	movs	r3, #32
 8002a7c:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8002a80:	f7ff fe2a 	bl	80026d8 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8002a84:	2000      	movs	r0, #0
 8002a86:	bd08      	pop	{r3, pc}

08002a88 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a88:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8002a8c:	2b22      	cmp	r3, #34	; 0x22
{
 8002a8e:	b510      	push	{r4, lr}
 8002a90:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a92:	d129      	bne.n	8002ae8 <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002a94:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a96:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 8002a98:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aa0:	ea02 0201 	and.w	r2, r2, r1
 8002aa4:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8002aa6:	d11b      	bne.n	8002ae0 <UART_Receive_IT+0x58>
 8002aa8:	6901      	ldr	r1, [r0, #16]
 8002aaa:	b9c9      	cbnz	r1, 8002ae0 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8002aac:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 8002ab0:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8002ab2:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8002ab6:	3c01      	subs	r4, #1
 8002ab8:	b2a4      	uxth	r4, r4
 8002aba:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8002abe:	b96c      	cbnz	r4, 8002adc <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ac0:	6803      	ldr	r3, [r0, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002ac8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	f022 0201 	bic.w	r2, r2, #1
 8002ad0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8002ad8:	f7ff fdff 	bl	80026da <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 8002adc:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8002ade:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002ae0:	1c59      	adds	r1, r3, #1
 8002ae2:	6541      	str	r1, [r0, #84]	; 0x54
 8002ae4:	701a      	strb	r2, [r3, #0]
 8002ae6:	e7e4      	b.n	8002ab2 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	f042 0208 	orr.w	r2, r2, #8
 8002aee:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8002af0:	2002      	movs	r0, #2
 8002af2:	bd10      	pop	{r4, pc}

08002af4 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002af4:	6802      	ldr	r2, [r0, #0]
 8002af6:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002af8:	6811      	ldr	r1, [r2, #0]
{
 8002afa:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002afc:	f013 050f 	ands.w	r5, r3, #15
{
 8002b00:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002b02:	d107      	bne.n	8002b14 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b04:	069e      	lsls	r6, r3, #26
 8002b06:	d505      	bpl.n	8002b14 <HAL_UART_IRQHandler+0x20>
 8002b08:	068e      	lsls	r6, r1, #26
 8002b0a:	d503      	bpl.n	8002b14 <HAL_UART_IRQHandler+0x20>
}
 8002b0c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8002b10:	f7ff bfba 	b.w	8002a88 <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8002b14:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8002b16:	2d00      	cmp	r5, #0
 8002b18:	d05c      	beq.n	8002bd4 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8002b1a:	f010 0501 	ands.w	r5, r0, #1
 8002b1e:	d102      	bne.n	8002b26 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8002b20:	f411 7f90 	tst.w	r1, #288	; 0x120
 8002b24:	d056      	beq.n	8002bd4 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b26:	07d8      	lsls	r0, r3, #31
 8002b28:	d507      	bpl.n	8002b3a <HAL_UART_IRQHandler+0x46>
 8002b2a:	05ce      	lsls	r6, r1, #23
 8002b2c:	d505      	bpl.n	8002b3a <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8002b2e:	2001      	movs	r0, #1
 8002b30:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b32:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002b34:	f040 0001 	orr.w	r0, r0, #1
 8002b38:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b3a:	0798      	lsls	r0, r3, #30
 8002b3c:	d506      	bpl.n	8002b4c <HAL_UART_IRQHandler+0x58>
 8002b3e:	b12d      	cbz	r5, 8002b4c <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8002b40:	2002      	movs	r0, #2
 8002b42:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b44:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002b46:	f040 0004 	orr.w	r0, r0, #4
 8002b4a:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b4c:	075e      	lsls	r6, r3, #29
 8002b4e:	d506      	bpl.n	8002b5e <HAL_UART_IRQHandler+0x6a>
 8002b50:	b12d      	cbz	r5, 8002b5e <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8002b52:	2004      	movs	r0, #4
 8002b54:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b56:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002b58:	f040 0002 	orr.w	r0, r0, #2
 8002b5c:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8002b5e:	0718      	lsls	r0, r3, #28
 8002b60:	d507      	bpl.n	8002b72 <HAL_UART_IRQHandler+0x7e>
 8002b62:	068e      	lsls	r6, r1, #26
 8002b64:	d400      	bmi.n	8002b68 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b66:	b125      	cbz	r5, 8002b72 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8002b68:	2008      	movs	r0, #8
 8002b6a:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b6c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002b6e:	4302      	orrs	r2, r0
 8002b70:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b72:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8002b74:	2a00      	cmp	r2, #0
 8002b76:	d050      	beq.n	8002c1a <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b78:	0698      	lsls	r0, r3, #26
 8002b7a:	d504      	bpl.n	8002b86 <HAL_UART_IRQHandler+0x92>
 8002b7c:	068a      	lsls	r2, r1, #26
 8002b7e:	d502      	bpl.n	8002b86 <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8002b80:	4620      	mov	r0, r4
 8002b82:	f7ff ff81 	bl	8002a88 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002b86:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002b88:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 8002b8a:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002b8c:	d404      	bmi.n	8002b98 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002b92:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002b96:	d019      	beq.n	8002bcc <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 8002b98:	f7ff fd91 	bl	80026be <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	0656      	lsls	r6, r2, #25
 8002ba2:	d50f      	bpl.n	8002bc4 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ba4:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002ba6:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ba8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bac:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002bae:	b148      	cbz	r0, 8002bc4 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <HAL_UART_IRQHandler+0x128>)
 8002bb2:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bb4:	f7fe fac8 	bl	8001148 <HAL_DMA_Abort_IT>
 8002bb8:	b378      	cbz	r0, 8002c1a <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bba:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8002bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bc0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002bc2:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f7ff fd89 	bl	80026dc <HAL_UART_ErrorCallback>
 8002bca:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002bcc:	f7ff fd86 	bl	80026dc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd0:	66e5      	str	r5, [r4, #108]	; 0x6c
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002bd4:	02dd      	lsls	r5, r3, #11
 8002bd6:	d50e      	bpl.n	8002bf6 <HAL_UART_IRQHandler+0x102>
 8002bd8:	0246      	lsls	r6, r0, #9
 8002bda:	d50c      	bpl.n	8002bf6 <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8002bdc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002be0:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8002be2:	2320      	movs	r3, #32
 8002be4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 8002be8:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8002bea:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8002bee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002bf2:	f000 b815 	b.w	8002c20 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002bf6:	061d      	lsls	r5, r3, #24
 8002bf8:	d506      	bpl.n	8002c08 <HAL_UART_IRQHandler+0x114>
 8002bfa:	0608      	lsls	r0, r1, #24
 8002bfc:	d504      	bpl.n	8002c08 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 8002bfe:	4620      	mov	r0, r4
}
 8002c00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8002c04:	f7ff bf05 	b.w	8002a12 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002c08:	065a      	lsls	r2, r3, #25
 8002c0a:	d506      	bpl.n	8002c1a <HAL_UART_IRQHandler+0x126>
 8002c0c:	064b      	lsls	r3, r1, #25
 8002c0e:	d504      	bpl.n	8002c1a <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8002c10:	4620      	mov	r0, r4
}
 8002c12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 8002c16:	f7ff bf2a 	b.w	8002a6e <UART_EndTransmit_IT>
 8002c1a:	bd70      	pop	{r4, r5, r6, pc}
 8002c1c:	080026df 	.word	0x080026df

08002c20 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002c20:	4770      	bx	lr

08002c22 <HAL_DRIVER_Init>:

static float32_t HAL_DRIVER_Filter_speed(DRIVER_HandleTypeDef *hdriver, float32_t speed_sample);

static float32_t HAL_DRIVER_Saturate(float32_t value, float32_t gain, float32_t lower, float32_t upper);

HAL_StatusTypeDef HAL_DRIVER_Init(DRIVER_HandleTypeDef *hdriver){
 8002c22:	b510      	push	{r4, lr}
 8002c24:	4604      	mov	r4, r0
	  HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_RESET);
 8002c26:	2200      	movs	r2, #0
 8002c28:	2120      	movs	r1, #32
 8002c2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c2e:	f7fe fbb1 	bl	8001394 <HAL_GPIO_WritePin>

	  /* Enable the Capture compare channel */
	  TIM_CCxChannelCmd(hdriver->htim_pwm->Instance, hdriver->pwm_ch, TIM_CCx_ENABLE);
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	68a1      	ldr	r1, [r4, #8]
 8002c36:	6818      	ldr	r0, [r3, #0]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f7ff fbe9 	bl	8002410 <TIM_CCxChannelCmd>
	  TIM_CCxNChannelCmd(hdriver->htim_pwm->Instance, hdriver->pwm_ch, TIM_CCxN_ENABLE);
 8002c3e:	6823      	ldr	r3, [r4, #0]
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;
 8002c40:	68a1      	ldr	r1, [r4, #8]
	  TIM_CCxNChannelCmd(hdriver->htim_pwm->Instance, hdriver->pwm_ch, TIM_CCxN_ENABLE);
 8002c42:	681a      	ldr	r2, [r3, #0]
  tmp = TIM_CCER_CC1NE << Channel;
 8002c44:	2304      	movs	r3, #4
 8002c46:	408b      	lsls	r3, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8002c48:	6a11      	ldr	r1, [r2, #32]
 8002c4a:	ea21 0103 	bic.w	r1, r1, r3
 8002c4e:	6211      	str	r1, [r2, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8002c50:	6a11      	ldr	r1, [r2, #32]
 8002c52:	430b      	orrs	r3, r1
 8002c54:	6213      	str	r3, [r2, #32]
	  hdriver->State = HAL_DRIVER_STATE_READY;
 8002c56:	2301      	movs	r3, #1
 8002c58:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
}
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	bd10      	pop	{r4, pc}

08002c60 <HAL_DRIVER_Start_PID>:
HAL_StatusTypeDef HAL_DRIVER_Start_PID(DRIVER_HandleTypeDef *hdriver, int16_t setpoint){
 8002c60:	b5f0      	push	{r4, r5, r6, r7, lr}
	hdriver->State = HAL_DRIVER_STATE_RUNNING;
 8002c62:	2302      	movs	r3, #2
HAL_StatusTypeDef HAL_DRIVER_Start_PID(DRIVER_HandleTypeDef *hdriver, int16_t setpoint){
 8002c64:	b087      	sub	sp, #28
 8002c66:	4605      	mov	r5, r0
	hdriver->State = HAL_DRIVER_STATE_RUNNING;
 8002c68:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
HAL_StatusTypeDef HAL_DRIVER_Start_PID(DRIVER_HandleTypeDef *hdriver, int16_t setpoint){
 8002c6c:	460f      	mov	r7, r1
	HAL_DRIVER_System_state newstate = {0};
 8002c6e:	2218      	movs	r2, #24
 8002c70:	2100      	movs	r1, #0
 8002c72:	4668      	mov	r0, sp
	hdriver->system = newstate;
 8002c74:	466c      	mov	r4, sp
	HAL_DRIVER_System_state newstate = {0};
 8002c76:	f000 fe31 	bl	80038dc <memset>
	hdriver->system = newstate;
 8002c7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c7c:	f105 0658 	add.w	r6, r5, #88	; 0x58
 8002c80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002c82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c86:	e886 0003 	stmia.w	r6, {r0, r1}
	arm_pid_init_f32(&hdriver->pid_inner ,1);
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	f105 0034 	add.w	r0, r5, #52	; 0x34
 8002c90:	f000 fdda 	bl	8003848 <arm_pid_init_f32>
	arm_pid_init_f32(&hdriver->pid_outer ,1);
 8002c94:	2101      	movs	r1, #1
 8002c96:	f105 0010 	add.w	r0, r5, #16
 8002c9a:	f000 fdd5 	bl	8003848 <arm_pid_init_f32>
	hdriver->system.outer_setpoint = hdriver->system.position + setpoint;
 8002c9e:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
 8002ca2:	441f      	add	r7, r3
	  HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_SET);
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	2120      	movs	r1, #32
 8002ca8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	hdriver->system.outer_setpoint = hdriver->system.position + setpoint;
 8002cac:	f8a5 705c 	strh.w	r7, [r5, #92]	; 0x5c
	  HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_SET);
 8002cb0:	f7fe fb70 	bl	8001394 <HAL_GPIO_WritePin>
	  HAL_ENC_Clear_CNT(hdriver->encoder);
 8002cb4:	68e8      	ldr	r0, [r5, #12]
 8002cb6:	f000 f991 	bl	8002fdc <HAL_ENC_Clear_CNT>
	  if(IS_TIM_BREAK_INSTANCE(hdriver->htim_pwm->Instance) != RESET)
 8002cba:	682b      	ldr	r3, [r5, #0]
 8002cbc:	4a0f      	ldr	r2, [pc, #60]	; (8002cfc <HAL_DRIVER_Start_PID+0x9c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d015      	beq.n	8002cf0 <HAL_DRIVER_Start_PID+0x90>
 8002cc4:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d011      	beq.n	8002cf0 <HAL_DRIVER_Start_PID+0x90>
 8002ccc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d00d      	beq.n	8002cf0 <HAL_DRIVER_Start_PID+0x90>
 8002cd4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_DRIVER_Start_PID+0x90>
	  __HAL_TIM_ENABLE(hdriver->htim_pwm);
 8002cdc:	681a      	ldr	r2, [r3, #0]
	return HAL_TIM_Base_Start_IT(hdriver->htim_pid);
 8002cde:	6868      	ldr	r0, [r5, #4]
	  __HAL_TIM_ENABLE(hdriver->htim_pwm);
 8002ce0:	f042 0201 	orr.w	r2, r2, #1
 8002ce4:	601a      	str	r2, [r3, #0]
}
 8002ce6:	b007      	add	sp, #28
 8002ce8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	return HAL_TIM_Base_Start_IT(hdriver->htim_pid);
 8002cec:	f7ff b822 	b.w	8001d34 <HAL_TIM_Base_Start_IT>
	    __HAL_TIM_MOE_ENABLE(hdriver->htim_pwm);
 8002cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cf6:	645a      	str	r2, [r3, #68]	; 0x44
 8002cf8:	e7f0      	b.n	8002cdc <HAL_DRIVER_Start_PID+0x7c>
 8002cfa:	bf00      	nop
 8002cfc:	40012c00 	.word	0x40012c00

08002d00 <HAL_DRIVER_Dispense>:
	if(hdriver->State != HAL_DRIVER_STATE_READY){
 8002d00:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d106      	bne.n	8002d16 <HAL_DRIVER_Dispense+0x16>
	HAL_DRIVER_Start_PID(hdriver, units * ENCODER_STEP);
 8002d08:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002d0c:	4359      	muls	r1, r3
 8002d0e:	f341 01cf 	sbfx	r1, r1, #3, #16
 8002d12:	f7ff bfa5 	b.w	8002c60 <HAL_DRIVER_Start_PID>
}
 8002d16:	2001      	movs	r0, #1
 8002d18:	4770      	bx	lr

08002d1a <HAL_DRIVER_Stop_PID>:
HAL_StatusTypeDef HAL_DRIVER_Stop_PID(DRIVER_HandleTypeDef *hdriver){
 8002d1a:	b510      	push	{r4, lr}
 8002d1c:	4604      	mov	r4, r0
	HAL_TIM_Base_Stop_IT(hdriver->htim_pid);
 8002d1e:	6840      	ldr	r0, [r0, #4]
 8002d20:	f7ff f813 	bl	8001d4a <HAL_TIM_Base_Stop_IT>
	  HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_RESET);
 8002d24:	2200      	movs	r2, #0
 8002d26:	2120      	movs	r1, #32
 8002d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d2c:	f7fe fb32 	bl	8001394 <HAL_GPIO_WritePin>
	  __HAL_TIM_DISABLE(hdriver->htim_pwm);
 8002d30:	6823      	ldr	r3, [r4, #0]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6a19      	ldr	r1, [r3, #32]
 8002d36:	f241 1211 	movw	r2, #4369	; 0x1111
 8002d3a:	4211      	tst	r1, r2
 8002d3c:	d108      	bne.n	8002d50 <HAL_DRIVER_Stop_PID+0x36>
 8002d3e:	6a19      	ldr	r1, [r3, #32]
 8002d40:	f240 4244 	movw	r2, #1092	; 0x444
 8002d44:	4211      	tst	r1, r2
 8002d46:	bf02      	ittt	eq
 8002d48:	681a      	ldreq	r2, [r3, #0]
 8002d4a:	f022 0201 	biceq.w	r2, r2, #1
 8002d4e:	601a      	streq	r2, [r3, #0]
	hdriver->State = HAL_DRIVER_STATE_READY;
 8002d50:	2301      	movs	r3, #1
 8002d52:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
}
 8002d56:	2000      	movs	r0, #0
 8002d58:	bd10      	pop	{r4, pc}
 8002d5a:	0000      	movs	r0, r0
 8002d5c:	0000      	movs	r0, r0
	...

08002d60 <HAL_DRIVER_Update_PID>:
	if(hdriver->State == HAL_DRIVER_STATE_BUSY){
 8002d60:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002d64:	2b04      	cmp	r3, #4
HAL_StatusTypeDef HAL_DRIVER_Update_PID(DRIVER_HandleTypeDef *hdriver){
 8002d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d6a:	4604      	mov	r4, r0
	if(hdriver->State == HAL_DRIVER_STATE_BUSY){
 8002d6c:	d105      	bne.n	8002d7a <HAL_DRIVER_Update_PID+0x1a>
		hdriver->system.missed_cycles++;
 8002d6e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8002d70:	3301      	adds	r3, #1
 8002d72:	66c3      	str	r3, [r0, #108]	; 0x6c
		return HAL_BUSY;
 8002d74:	2002      	movs	r0, #2
 8002d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (hdriver->State != HAL_DRIVER_STATE_RUNNING){
 8002d7a:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	f040 80fa 	bne.w	8002f78 <HAL_DRIVER_Update_PID+0x218>
	if(hdriver->system.inner_pid_cycles++ == 0){
 8002d84:	6e42      	ldr	r2, [r0, #100]	; 0x64
	hdriver->State = HAL_DRIVER_STATE_BUSY;
 8002d86:	2304      	movs	r3, #4
 8002d88:	f880 3071 	strb.w	r3, [r0, #113]	; 0x71
	if(hdriver->system.inner_pid_cycles++ == 0){
 8002d8c:	1c53      	adds	r3, r2, #1
 8002d8e:	6643      	str	r3, [r0, #100]	; 0x64
 8002d90:	2a00      	cmp	r2, #0
 8002d92:	d140      	bne.n	8002e16 <HAL_DRIVER_Update_PID+0xb6>
	    int16_t error_fixed_point = (hdriver->system.outer_setpoint - hdriver->system.position);
 8002d94:	f8b0 305c 	ldrh.w	r3, [r0, #92]	; 0x5c
 8002d98:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
 8002d9c:	1a5b      	subs	r3, r3, r1
 8002d9e:	b21b      	sxth	r3, r3
		if(!error_fixed_point){
 8002da0:	b93b      	cbnz	r3, 8002db2 <HAL_DRIVER_Update_PID+0x52>
			if(hdriver->system.stable_cycles > STABLE_CYCLES) {
 8002da2:	6e82      	ldr	r2, [r0, #104]	; 0x68
 8002da4:	2a0a      	cmp	r2, #10
 8002da6:	d903      	bls.n	8002db0 <HAL_DRIVER_Update_PID+0x50>
}
 8002da8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				return HAL_DRIVER_Stop_PID(hdriver);
 8002dac:	f7ff bfb5 	b.w	8002d1a <HAL_DRIVER_Stop_PID>
			hdriver->system.stable_cycles++;
 8002db0:	3201      	adds	r2, #1
		error = (float32_t)error_fixed_point;
 8002db2:	ee07 3a90 	vmov	s15, r3
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002db6:	edd4 6a07 	vldr	s13, [r4, #28]
    out = (S->A0 * in) +
 8002dba:	ed94 6a04 	vldr	s12, [r4, #16]
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002dbe:	edd4 5a06 	vldr	s11, [r4, #24]
			hdriver->system.stable_cycles = 0;
 8002dc2:	66a2      	str	r2, [r4, #104]	; 0x68
		error = (float32_t)error_fixed_point;
 8002dc4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dc8:	edd4 7a05 	vldr	s15, [r4, #20]

    /* Update state */
    S->state[1] = S->state[0];
    S->state[0] = in;
 8002dcc:	ed84 7a07 	vstr	s14, [r4, #28]
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002dd4:	eee7 7a06 	vfma.f32	s15, s14, s12
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002dd8:	ed94 6a08 	vldr	s12, [r4, #32]
    S->state[1] = S->state[0];
 8002ddc:	edc4 6a08 	vstr	s13, [r4, #32]
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002de0:	eee5 7a86 	vfma.f32	s15, s11, s12
    out = (S->A0 * in) +
 8002de4:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8002de8:	ee77 7a86 	vadd.f32	s15, s15, s12
	  if(value < lower){
 8002dec:	eeb9 7a06 	vmov.f32	s14, #150	; 0xc0b00000 -5.5
 8002df0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    S->state[2] = out;
 8002df8:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
 8002dfc:	f100 80b0 	bmi.w	8002f60 <HAL_DRIVER_Update_PID+0x200>
	  } else if (value > upper) {
 8002e00:	eeb1 7a06 	vmov.f32	s14, #22	; 0x40b00000  5.5
		  value = upper;
 8002e04:	eef4 7a47 	vcmp.f32	s15, s14
 8002e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e0c:	bfc8      	it	gt
 8002e0e:	eef0 7a47 	vmovgt.f32	s15, s14
		hdriver->system.inner_setpoint = HAL_DRIVER_Saturate(
 8002e12:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
	int16_t new_position = HAL_ENC_GetPosition(hdriver->encoder);	//Current position
 8002e16:	68e0      	ldr	r0, [r4, #12]
 8002e18:	f000 f8d7 	bl	8002fca <HAL_ENC_GetPosition>
 8002e1c:	4605      	mov	r5, r0
	float32_t speed = (new_position - hdriver->system.position)
 8002e1e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
			* ((2 * 3.1415 * PID_INNER_RATE) / ENCODER_CPR);		//Current in rad/s
 8002e22:	1a28      	subs	r0, r5, r0
 8002e24:	f7fd fb22 	bl	800046c <__aeabi_i2d>
 8002e28:	a35a      	add	r3, pc, #360	; (adr r3, 8002f94 <HAL_DRIVER_Update_PID+0x234>)
 8002e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2e:	f7fd fb83 	bl	8000538 <__aeabi_dmul>
	float32_t speed = (new_position - hdriver->system.position)
 8002e32:	f7fd fd93 	bl	800095c <__aeabi_d2f>
	hdriver->system.position = new_position;
 8002e36:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
	float32_t speed = (new_position - hdriver->system.position)
 8002e3a:	4680      	mov	r8, r0
	  hdriver->system.avg_speed = (MA_ALFA*speed_sample)+((1-MA_ALFA)*hdriver->system.avg_speed);
 8002e3c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002e3e:	f7fd fb27 	bl	8000490 <__aeabi_f2d>
 8002e42:	a356      	add	r3, pc, #344	; (adr r3, 8002f9c <HAL_DRIVER_Update_PID+0x23c>)
 8002e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e48:	f7fd fb76 	bl	8000538 <__aeabi_dmul>
 8002e4c:	4606      	mov	r6, r0
 8002e4e:	4640      	mov	r0, r8
 8002e50:	460f      	mov	r7, r1
 8002e52:	f7fd fb1d 	bl	8000490 <__aeabi_f2d>
 8002e56:	a353      	add	r3, pc, #332	; (adr r3, 8002fa4 <HAL_DRIVER_Update_PID+0x244>)
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f7fd fb6c 	bl	8000538 <__aeabi_dmul>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4630      	mov	r0, r6
 8002e66:	4639      	mov	r1, r7
 8002e68:	f7fd f9b4 	bl	80001d4 <__adddf3>
 8002e6c:	f7fd fd76 	bl	800095c <__aeabi_d2f>
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002e70:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
	error = hdriver->system.inner_setpoint - filtered_speed;
 8002e74:	ed94 7a16 	vldr	s14, [r4, #88]	; 0x58
 8002e78:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
    out = (S->A0 * in) +
 8002e7c:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002e80:	ed94 5a0f 	vldr	s10, [r4, #60]	; 0x3c
	  hdriver->system.avg_speed = (MA_ALFA*speed_sample)+((1-MA_ALFA)*hdriver->system.avg_speed);
 8002e84:	6620      	str	r0, [r4, #96]	; 0x60
 8002e86:	ee06 0a90 	vmov	s13, r0
 8002e8a:	ee66 7a27 	vmul.f32	s15, s12, s15
	error = hdriver->system.inner_setpoint - filtered_speed;
 8002e8e:	ee77 6a66 	vsub.f32	s13, s14, s13
    out = (S->A0 * in) +
 8002e92:	eee6 7aa5 	vfma.f32	s15, s13, s11
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002e96:	edd4 5a11 	vldr	s11, [r4, #68]	; 0x44
    S->state[0] = in;
 8002e9a:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002e9e:	eee5 7a25 	vfma.f32	s15, s10, s11
    out = (S->A0 * in) +
 8002ea2:	edd4 5a12 	vldr	s11, [r4, #72]	; 0x48
    S->state[1] = S->state[0];
 8002ea6:	ed84 6a11 	vstr	s12, [r4, #68]	; 0x44
    out = (S->A0 * in) +
 8002eaa:	ee77 7aa5 	vadd.f32	s15, s15, s11
	  if(value < lower){
 8002eae:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8002eb2:	eef4 7ae6 	vcmpe.f32	s15, s13
 8002eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    S->state[2] = out;
 8002eba:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
 8002ebe:	d452      	bmi.n	8002f66 <HAL_DRIVER_Update_PID+0x206>
	  } else if (value > upper) {
 8002ec0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
		  value = upper;
 8002ec4:	eef4 7a66 	vcmp.f32	s15, s13
 8002ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ecc:	bfc8      	it	gt
 8002ece:	eef0 7a66 	vmovgt.f32	s15, s13
	  value = gain * value;
 8002ed2:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002f80 <HAL_DRIVER_Update_PID+0x220>
	  if(value < lower){
 8002ed6:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8002f84 <HAL_DRIVER_Update_PID+0x224>
	  value = gain * value;
 8002eda:	ee27 7a26 	vmul.f32	s14, s14, s13
 8002ede:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002f88 <HAL_DRIVER_Update_PID+0x228>
	  if(value < lower){
 8002ee2:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8002ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eea:	d43f      	bmi.n	8002f6c <HAL_DRIVER_Update_PID+0x20c>
		  value = upper;
 8002eec:	eeb4 7a66 	vcmp.f32	s14, s13
 8002ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef4:	bfc8      	it	gt
 8002ef6:	eeb0 7a66 	vmovgt.f32	s14, s13
	int8_t lookup_ff = HAL_DRIVER_Saturate(
 8002efa:	eebd 7ac7 	vcvt.s32.f32	s14, s14
									(deadzone_lookup[(uint8_t)(lookup_ff + 127)] + inner_pid_output),
 8002efe:	4a23      	ldr	r2, [pc, #140]	; (8002f8c <HAL_DRIVER_Update_PID+0x22c>)
	int8_t lookup_ff = HAL_DRIVER_Saturate(
 8002f00:	ee17 3a10 	vmov	r3, s14
									(deadzone_lookup[(uint8_t)(lookup_ff + 127)] + inner_pid_output),
 8002f04:	337f      	adds	r3, #127	; 0x7f
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float32_t duty_cycle  = HAL_DRIVER_Saturate(
 8002f0c:	ed93 7a00 	vldr	s14, [r3]
 8002f10:	ee77 7a87 	vadd.f32	s15, s15, s14
	  if(value < lower){
 8002f14:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002f90 <HAL_DRIVER_Update_PID+0x230>
	  value = gain * value;
 8002f18:	ee67 7aa6 	vmul.f32	s15, s15, s13
	  if(value < lower){
 8002f1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f24:	d425      	bmi.n	8002f72 <HAL_DRIVER_Update_PID+0x212>
		  value = upper;
 8002f26:	eef4 7a66 	vcmp.f32	s15, s13
 8002f2a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002f88 <HAL_DRIVER_Update_PID+0x228>
 8002f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f32:	bfc8      	it	gt
 8002f34:	eef0 7a47 	vmovgt.f32	s15, s14
	if(hdriver->system.inner_pid_cycles >= CASCADE_RATIO){
 8002f38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f3a:	2b09      	cmp	r3, #9
		hdriver->system.inner_pid_cycles = 0;
 8002f3c:	bf84      	itt	hi
 8002f3e:	2300      	movhi	r3, #0
 8002f40:	6663      	strhi	r3, [r4, #100]	; 0x64
	HAL_DRIVER_Set_speed(hdriver, (int8_t)duty_cycle);
 8002f42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	  hdriver->htim_pwm->Instance->CCR3 = (uint8_t)(speed + 0x80);
 8002f46:	6823      	ldr	r3, [r4, #0]
 8002f48:	681a      	ldr	r2, [r3, #0]
	HAL_DRIVER_Set_speed(hdriver, (int8_t)duty_cycle);
 8002f4a:	ee17 3a90 	vmov	r3, s15
	  hdriver->htim_pwm->Instance->CCR3 = (uint8_t)(speed + 0x80);
 8002f4e:	3b80      	subs	r3, #128	; 0x80
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	63d3      	str	r3, [r2, #60]	; 0x3c
	hdriver->State = HAL_DRIVER_STATE_RUNNING;
 8002f54:	2302      	movs	r3, #2
 8002f56:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
	return HAL_OK;
 8002f5a:	2000      	movs	r0, #0
 8002f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		  value = lower;
 8002f60:	eef0 7a47 	vmov.f32	s15, s14
 8002f64:	e755      	b.n	8002e12 <HAL_DRIVER_Update_PID+0xb2>
 8002f66:	eef0 7a66 	vmov.f32	s15, s13
 8002f6a:	e7b2      	b.n	8002ed2 <HAL_DRIVER_Update_PID+0x172>
 8002f6c:	eeb0 7a46 	vmov.f32	s14, s12
 8002f70:	e7c3      	b.n	8002efa <HAL_DRIVER_Update_PID+0x19a>
 8002f72:	eef0 7a47 	vmov.f32	s15, s14
 8002f76:	e7df      	b.n	8002f38 <HAL_DRIVER_Update_PID+0x1d8>
		return HAL_ERROR;
 8002f78:	2001      	movs	r0, #1
}
 8002f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f7e:	bf00      	nop
 8002f80:	41ba6666 	.word	0x41ba6666
 8002f84:	c2fe0000 	.word	0xc2fe0000
 8002f88:	42fe0000 	.word	0x42fe0000
 8002f8c:	20000008 	.word	0x20000008
 8002f90:	c3000000 	.word	0xc3000000
 8002f94:	c083126f 	.word	0xc083126f
 8002f98:	400921ca 	.word	0x400921ca
 8002f9c:	7ae147ae 	.word	0x7ae147ae
 8002fa0:	3fefae14 	.word	0x3fefae14
 8002fa4:	47ae147b 	.word	0x47ae147b
 8002fa8:	3f847ae1 	.word	0x3f847ae1

08002fac <HAL_ENC_Init>:

#include "encoder.h"
#include "stm32f3xx_hal.h"

HAL_StatusTypeDef HAL_ENC_Init(ENC_HandleTypeDef *hencoder) {
	if(hencoder->State != HAL_ENC_STATE_RESET){
 8002fac:	7a03      	ldrb	r3, [r0, #8]
HAL_StatusTypeDef HAL_ENC_Init(ENC_HandleTypeDef *hencoder) {
 8002fae:	b510      	push	{r4, lr}
 8002fb0:	4604      	mov	r4, r0
	if(hencoder->State != HAL_ENC_STATE_RESET){
 8002fb2:	b10b      	cbz	r3, 8002fb8 <HAL_ENC_Init+0xc>
		return HAL_ERROR;
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	bd10      	pop	{r4, pc}
	}
	if (HAL_TIM_Encoder_Start(hencoder->Instance, TIM_CHANNEL_ALL) == HAL_OK){
 8002fb8:	213c      	movs	r1, #60	; 0x3c
 8002fba:	6800      	ldr	r0, [r0, #0]
 8002fbc:	f7fe fedb 	bl	8001d76 <HAL_TIM_Encoder_Start>
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d1f7      	bne.n	8002fb4 <HAL_ENC_Init+0x8>
		hencoder->State = HAL_ENC_STATE_READY;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	7223      	strb	r3, [r4, #8]
		return HAL_OK;
	}
	return HAL_ERROR;
}
 8002fc8:	bd10      	pop	{r4, pc}

08002fca <HAL_ENC_GetPosition>:

volatile int16_t HAL_ENC_GetPosition(ENC_HandleTypeDef *hencoder) {
	if(hencoder->State != HAL_ENC_STATE_READY){
 8002fca:	7a03      	ldrb	r3, [r0, #8]
 8002fcc:	2b01      	cmp	r3, #1
		return HAL_ERROR;
	}
	return hencoder->Instance->Instance->CNT;
 8002fce:	bf03      	ittte	eq
 8002fd0:	6803      	ldreq	r3, [r0, #0]
 8002fd2:	681b      	ldreq	r3, [r3, #0]
 8002fd4:	6a58      	ldreq	r0, [r3, #36]	; 0x24
 8002fd6:	2001      	movne	r0, #1
}
 8002fd8:	b200      	sxth	r0, r0
 8002fda:	4770      	bx	lr

08002fdc <HAL_ENC_Clear_CNT>:
	hencoder->Instance->Instance->CNT += offset;
	return;
}

HAL_StatusTypeDef HAL_ENC_Clear_CNT(ENC_HandleTypeDef *hencoder) {
	if(hencoder->State != HAL_ENC_STATE_READY){
 8002fdc:	7a03      	ldrb	r3, [r0, #8]
 8002fde:	2b01      	cmp	r3, #1
		return HAL_ERROR;
	}
	hencoder->Instance->Instance->CNT = 0;
 8002fe0:	bf01      	itttt	eq
 8002fe2:	6803      	ldreq	r3, [r0, #0]
 8002fe4:	681b      	ldreq	r3, [r3, #0]
 8002fe6:	2000      	moveq	r0, #0
 8002fe8:	6258      	streq	r0, [r3, #36]	; 0x24
		return HAL_ERROR;
 8002fea:	bf18      	it	ne
 8002fec:	2001      	movne	r0, #1
	return HAL_OK;
}
 8002fee:	4770      	bx	lr

08002ff0 <HAL_ENC_Index_Callback>:

HAL_StatusTypeDef HAL_ENC_Index_Callback(ENC_HandleTypeDef *hencoder) {
 8002ff0:	b508      	push	{r3, lr}
	if(hencoder->State != HAL_ENC_STATE_READY){
 8002ff2:	7a03      	ldrb	r3, [r0, #8]
 8002ff4:	2b01      	cmp	r3, #1
HAL_StatusTypeDef HAL_ENC_Index_Callback(ENC_HandleTypeDef *hencoder) {
 8002ff6:	4602      	mov	r2, r0
	if(hencoder->State != HAL_ENC_STATE_READY){
 8002ff8:	d114      	bne.n	8003024 <HAL_ENC_Index_Callback+0x34>
		return HAL_ERROR;
	}
	hencoder->True_index = HAL_ENC_GetPosition(hencoder) % 250;
 8002ffa:	f7ff ffe6 	bl	8002fca <HAL_ENC_GetPosition>
 8002ffe:	23fa      	movs	r3, #250	; 0xfa
 8003000:	fb90 f1f3 	sdiv	r1, r0, r3
 8003004:	fb01 0013 	mls	r0, r1, r3, r0

	if(hencoder->True_index != hencoder->True_index_offset){
 8003008:	88d3      	ldrh	r3, [r2, #6]
	hencoder->True_index = HAL_ENC_GetPosition(hencoder) % 250;
 800300a:	b280      	uxth	r0, r0
	if(hencoder->True_index != hencoder->True_index_offset){
 800300c:	4298      	cmp	r0, r3
	hencoder->True_index = HAL_ENC_GetPosition(hencoder) % 250;
 800300e:	8090      	strh	r0, [r2, #4]
	if(hencoder->True_index != hencoder->True_index_offset){
 8003010:	d006      	beq.n	8003020 <HAL_ENC_Index_Callback+0x30>
	hencoder->Instance->Instance->CNT += offset;
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	6a51      	ldr	r1, [r2, #36]	; 0x24
		HAL_ENC_Adjust_offset(hencoder, hencoder->True_index_offset - hencoder->True_index);
 8003018:	1a18      	subs	r0, r3, r0
	hencoder->Instance->Instance->CNT += offset;
 800301a:	fa01 f080 	sxtah	r0, r1, r0
 800301e:	6250      	str	r0, [r2, #36]	; 0x24
	}

	return HAL_OK;
 8003020:	2000      	movs	r0, #0
}
 8003022:	bd08      	pop	{r3, pc}
		return HAL_ERROR;
 8003024:	2001      	movs	r0, #1
 8003026:	bd08      	pop	{r3, pc}

08003028 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003028:	b510      	push	{r4, lr}
 800302a:	b096      	sub	sp, #88	; 0x58
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800302c:	2301      	movs	r3, #1
 800302e:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003030:	2310      	movs	r3, #16
 8003032:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003034:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003036:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003038:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800303a:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800303c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003040:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003042:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003044:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003046:	f7fe fa2b 	bl	80014a0 <HAL_RCC_OscConfig>
 800304a:	b100      	cbz	r0, 800304e <SystemClock_Config+0x26>
 800304c:	e7fe      	b.n	800304c <SystemClock_Config+0x24>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800304e:	230f      	movs	r3, #15
 8003050:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003052:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003054:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003058:	9005      	str	r0, [sp, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800305a:	4621      	mov	r1, r4
 800305c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800305e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003060:	9304      	str	r3, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003062:	f7fe fcc1 	bl	80019e8 <HAL_RCC_ClockConfig>
 8003066:	b100      	cbz	r0, 800306a <SystemClock_Config+0x42>
 8003068:	e7fe      	b.n	8003068 <SystemClock_Config+0x40>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_ADC12;
 800306a:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 800306e:	9306      	str	r3, [sp, #24]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV4;
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8003070:	900b      	str	r0, [sp, #44]	; 0x2c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV4;
 8003072:	f44f 7390 	mov.w	r3, #288	; 0x120
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003076:	a806      	add	r0, sp, #24
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV4;
 8003078:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800307a:	f7fe fdad 	bl	8001bd8 <HAL_RCCEx_PeriphCLKConfig>
 800307e:	4604      	mov	r4, r0
 8003080:	b100      	cbz	r0, 8003084 <SystemClock_Config+0x5c>
 8003082:	e7fe      	b.n	8003082 <SystemClock_Config+0x5a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003084:	f7fe fd72 	bl	8001b6c <HAL_RCC_GetHCLKFreq>
 8003088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800308c:	fbb0 f0f3 	udiv	r0, r0, r3
 8003090:	f7fd fffe 	bl	8001090 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003094:	2004      	movs	r0, #4
 8003096:	f7fe f811 	bl	80010bc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800309a:	4622      	mov	r2, r4
 800309c:	4621      	mov	r1, r4
 800309e:	f04f 30ff 	mov.w	r0, #4294967295
 80030a2:	f7fd ffb5 	bl	8001010 <HAL_NVIC_SetPriority>
}
 80030a6:	b016      	add	sp, #88	; 0x58
 80030a8:	bd10      	pop	{r4, pc}
	...

080030ac <main>:
{
 80030ac:	b580      	push	{r7, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030ae:	4da4      	ldr	r5, [pc, #656]	; (8003340 <main+0x294>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ACT_ARM_Pin|ACT_VALVE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : TUNE_Pin */
  GPIO_InitStruct.Pin = TUNE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80030b0:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 8003370 <main+0x2c4>
{
 80030b4:	b09e      	sub	sp, #120	; 0x78
  HAL_Init();
 80030b6:	f7fd fcc5 	bl	8000a44 <HAL_Init>
  SystemClock_Config();
 80030ba:	f7ff ffb5 	bl	8003028 <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030be:	696b      	ldr	r3, [r5, #20]
 80030c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80030c4:	616b      	str	r3, [r5, #20]
 80030c6:	696b      	ldr	r3, [r5, #20]
 80030c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030cc:	9302      	str	r3, [sp, #8]
 80030ce:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030d0:	696b      	ldr	r3, [r5, #20]
 80030d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d6:	616b      	str	r3, [r5, #20]
 80030d8:	696b      	ldr	r3, [r5, #20]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	9303      	str	r3, [sp, #12]
 80030e0:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030e2:	696b      	ldr	r3, [r5, #20]
 80030e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e8:	616b      	str	r3, [r5, #20]
 80030ea:	696b      	ldr	r3, [r5, #20]
 80030ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030f0:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_RESET);
 80030f2:	2200      	movs	r2, #0
 80030f4:	2120      	movs	r1, #32
 80030f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030fa:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(DRV_ENABLE_GPIO_Port, DRV_ENABLE_Pin, GPIO_PIN_RESET);
 80030fc:	f7fe f94a 	bl	8001394 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ACT_ARM_Pin|ACT_VALVE_Pin, GPIO_PIN_RESET);
 8003100:	2200      	movs	r2, #0
 8003102:	2130      	movs	r1, #48	; 0x30
 8003104:	488f      	ldr	r0, [pc, #572]	; (8003344 <main+0x298>)
 8003106:	f7fe f945 	bl	8001394 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800310a:	2601      	movs	r6, #1
  GPIO_InitStruct.Pin = TUNE_Pin;
 800310c:	2710      	movs	r7, #16
  HAL_GPIO_Init(TUNE_GPIO_Port, &GPIO_InitStruct);
 800310e:	a913      	add	r1, sp, #76	; 0x4c
 8003110:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000

  /*Configure GPIO pin : DRV_ENABLE_Pin */
  GPIO_InitStruct.Pin = DRV_ENABLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = TUNE_Pin;
 8003116:	9713      	str	r7, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003118:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800311c:	9615      	str	r6, [sp, #84]	; 0x54
  HAL_GPIO_Init(TUNE_GPIO_Port, &GPIO_InitStruct);
 800311e:	f7fe f87f 	bl	8001220 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DRV_ENABLE_Pin;
 8003122:	2320      	movs	r3, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(DRV_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003124:	a913      	add	r1, sp, #76	; 0x4c
 8003126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = DRV_ENABLE_Pin;
 800312a:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800312c:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003130:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(DRV_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8003132:	f7fe f875 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : CUPBUS_1_Pin CUPBUS_3_Pin CUPBUS_2_Pin */
  GPIO_InitStruct.Pin = CUPBUS_1_Pin|CUPBUS_3_Pin|CUPBUS_2_Pin;
 8003136:	23c1      	movs	r3, #193	; 0xc1
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003138:	a913      	add	r1, sp, #76	; 0x4c
 800313a:	4882      	ldr	r0, [pc, #520]	; (8003344 <main+0x298>)
  GPIO_InitStruct.Pin = CUPBUS_1_Pin|CUPBUS_3_Pin|CUPBUS_2_Pin;
 800313c:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800313e:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	9415      	str	r4, [sp, #84]	; 0x54

  /*Configure GPIO pin : BREW_BTN_Pin */
  GPIO_InitStruct.Pin = BREW_BTN_Pin;
 8003142:	f04f 0a02 	mov.w	sl, #2
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003146:	f7fe f86b 	bl	8001220 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(BREW_BTN_GPIO_Port, &GPIO_InitStruct);
 800314a:	a913      	add	r1, sp, #76	; 0x4c
 800314c:	487d      	ldr	r0, [pc, #500]	; (8003344 <main+0x298>)
  GPIO_InitStruct.Pin = BREW_BTN_Pin;
 800314e:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003152:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003156:	9615      	str	r6, [sp, #84]	; 0x54
  HAL_GPIO_Init(BREW_BTN_GPIO_Port, &GPIO_InitStruct);
 8003158:	f7fe f862 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_I_Pin */
  GPIO_InitStruct.Pin = ENC_I_Pin;
 800315c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003160:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ENC_I_GPIO_Port, &GPIO_InitStruct);
 8003162:	a913      	add	r1, sp, #76	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003164:	4b78      	ldr	r3, [pc, #480]	; (8003348 <main+0x29c>)
 8003166:	9314      	str	r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(ENC_I_GPIO_Port, &GPIO_InitStruct);
 8003168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800316c:	9415      	str	r4, [sp, #84]	; 0x54
  HAL_GPIO_Init(ENC_I_GPIO_Port, &GPIO_InitStruct);
 800316e:	f7fe f857 	bl	8001220 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACT_ARM_Pin ACT_VALVE_Pin */
  GPIO_InitStruct.Pin = ACT_ARM_Pin|ACT_VALVE_Pin;
 8003172:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003174:	a913      	add	r1, sp, #76	; 0x4c
 8003176:	4873      	ldr	r0, [pc, #460]	; (8003344 <main+0x298>)
  GPIO_InitStruct.Pin = ACT_ARM_Pin|ACT_VALVE_Pin;
 8003178:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800317a:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317c:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317e:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003180:	f7fe f84e 	bl	8001220 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8003184:	4622      	mov	r2, r4
 8003186:	4621      	mov	r1, r4
 8003188:	2007      	movs	r0, #7
 800318a:	f7fd ff41 	bl	8001010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800318e:	2007      	movs	r0, #7
 8003190:	f7fd ff72 	bl	8001078 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003194:	4622      	mov	r2, r4
 8003196:	4621      	mov	r1, r4
 8003198:	200a      	movs	r0, #10
 800319a:	f7fd ff39 	bl	8001010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800319e:	200a      	movs	r0, #10
 80031a0:	f7fd ff6a 	bl	8001078 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80031a4:	4622      	mov	r2, r4
 80031a6:	4621      	mov	r1, r4
 80031a8:	2017      	movs	r0, #23
 80031aa:	f7fd ff31 	bl	8001010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80031ae:	2017      	movs	r0, #23
 80031b0:	f7fd ff62 	bl	8001078 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031b4:	696b      	ldr	r3, [r5, #20]
 80031b6:	4333      	orrs	r3, r6
 80031b8:	616b      	str	r3, [r5, #20]
 80031ba:	696b      	ldr	r3, [r5, #20]
 80031bc:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80031be:	4622      	mov	r2, r4
 80031c0:	4621      	mov	r1, r4
 80031c2:	4638      	mov	r0, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80031c8:	f7fd ff22 	bl	8001010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80031cc:	4638      	mov	r0, r7
 80031ce:	f7fd ff53 	bl	8001078 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80031d2:	4622      	mov	r2, r4
 80031d4:	4621      	mov	r1, r4
 80031d6:	2011      	movs	r0, #17
 80031d8:	f7fd ff1a 	bl	8001010 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80031dc:	2011      	movs	r0, #17
 80031de:	f7fd ff4b 	bl	8001078 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 80031e2:	485a      	ldr	r0, [pc, #360]	; (800334c <main+0x2a0>)
  huart2.Init.BaudRate = 115200;
 80031e4:	4b5a      	ldr	r3, [pc, #360]	; (8003350 <main+0x2a4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031e6:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 80031e8:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
 80031ec:	e880 0028 	stmia.w	r0, {r3, r5}
  huart2.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80031f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  huart2.Init.Mode = UART_MODE_TX_RX;
 80031f4:	f04f 090c 	mov.w	r9, #12
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 80031f8:	2703      	movs	r7, #3
  huart2.AdvancedInit.TxPinLevelInvert = UART_ADVFEATURE_TXINV_ENABLE;
 80031fa:	6283      	str	r3, [r0, #40]	; 0x28
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 80031fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003200:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003202:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003204:	f8c0 9014 	str.w	r9, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003208:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800320a:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800320c:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_TXINVERT_INIT|UART_ADVFEATURE_RXINVERT_INIT;
 800320e:	6247      	str	r7, [r0, #36]	; 0x24
  huart2.AdvancedInit.RxPinLevelInvert = UART_ADVFEATURE_RXINV_ENABLE;
 8003210:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003212:	f7ff fbcc 	bl	80029ae <HAL_UART_Init>
 8003216:	b100      	cbz	r0, 800321a <main+0x16e>
 8003218:	e7fe      	b.n	8003218 <main+0x16c>
  htim2.Instance = TIM2;
 800321a:	4c4e      	ldr	r4, [pc, #312]	; (8003354 <main+0x2a8>)
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800321c:	9016      	str	r0, [sp, #88]	; 0x58
  htim2.Instance = TIM2;
 800321e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003222:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 8003224:	6060      	str	r0, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003226:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 0xffff;
 8003228:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800322c:	6120      	str	r0, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800322e:	61a0      	str	r0, [r4, #24]
  sConfig.IC1Filter = 4;
 8003230:	f04f 0804 	mov.w	r8, #4
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003234:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003236:	a913      	add	r1, sp, #76	; 0x4c
 8003238:	4620      	mov	r0, r4
  htim2.Init.Period = 0xffff;
 800323a:	60e3      	str	r3, [r4, #12]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800323c:	9713      	str	r7, [sp, #76]	; 0x4c
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800323e:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003242:	9615      	str	r6, [sp, #84]	; 0x54
  sConfig.IC1Filter = 4;
 8003244:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003248:	f8cd a060 	str.w	sl, [sp, #96]	; 0x60
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800324c:	9619      	str	r6, [sp, #100]	; 0x64
  sConfig.IC2Filter = 4;
 800324e:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8003252:	f7fe fee5 	bl	8002020 <HAL_TIM_Encoder_Init>
 8003256:	4625      	mov	r5, r4
 8003258:	b100      	cbz	r0, 800325c <main+0x1b0>
 800325a:	e7fe      	b.n	800325a <main+0x1ae>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800325c:	900c      	str	r0, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800325e:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003260:	a90c      	add	r1, sp, #48	; 0x30
 8003262:	4620      	mov	r0, r4
 8003264:	f7ff f9c8 	bl	80025f8 <HAL_TIMEx_MasterConfigSynchronization>
 8003268:	b100      	cbz	r0, 800326c <main+0x1c0>
 800326a:	e7fe      	b.n	800326a <main+0x1be>
  hopamp2.Instance = OPAMP2;
 800326c:	4b3a      	ldr	r3, [pc, #232]	; (8003358 <main+0x2ac>)
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 800326e:	4a3b      	ldr	r2, [pc, #236]	; (800335c <main+0x2b0>)
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8003270:	6118      	str	r0, [r3, #16]
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 8003272:	2460      	movs	r4, #96	; 0x60
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8003274:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8003276:	4618      	mov	r0, r3
  hopamp2.Init.Mode = OPAMP_FOLLOWER_MODE;
 8003278:	e883 0014 	stmia.w	r3, {r2, r4}
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800327c:	f8c3 900c 	str.w	r9, [r3, #12]
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8003280:	f7fe f89a 	bl	80013b8 <HAL_OPAMP_Init>
 8003284:	b100      	cbz	r0, 8003288 <main+0x1dc>
 8003286:	e7fe      	b.n	8003286 <main+0x1da>
  hadc2.Instance = ADC2;
 8003288:	4c35      	ldr	r4, [pc, #212]	; (8003360 <main+0x2b4>)
 800328a:	4b36      	ldr	r3, [pc, #216]	; (8003364 <main+0x2b8>)
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800328c:	6060      	str	r0, [r4, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800328e:	60a0      	str	r0, [r4, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003290:	6120      	str	r0, [r4, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003292:	61e0      	str	r0, [r4, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003294:	6260      	str	r0, [r4, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003296:	6320      	str	r0, [r4, #48]	; 0x30
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003298:	60e0      	str	r0, [r4, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800329a:	6360      	str	r0, [r4, #52]	; 0x34
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800329c:	61a0      	str	r0, [r4, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800329e:	63a0      	str	r0, [r4, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80032a0:	4620      	mov	r0, r4
  hadc2.Instance = ADC2;
 80032a2:	6023      	str	r3, [r4, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032a4:	62e6      	str	r6, [r4, #44]	; 0x2c
  hadc2.Init.NbrOfConversion = 1;
 80032a6:	6226      	str	r6, [r4, #32]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032a8:	f8c4 8014 	str.w	r8, [r4, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80032ac:	f7fd fc26 	bl	8000afc <HAL_ADC_Init>
 80032b0:	b100      	cbz	r0, 80032b4 <main+0x208>
 80032b2:	e7fe      	b.n	80032b2 <main+0x206>
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80032b4:	9016      	str	r0, [sp, #88]	; 0x58
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80032b6:	9015      	str	r0, [sp, #84]	; 0x54
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80032b8:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfig.Offset = 0;
 80032ba:	9018      	str	r0, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032bc:	a913      	add	r1, sp, #76	; 0x4c
 80032be:	4620      	mov	r0, r4
  sConfig.Channel = ADC_CHANNEL_3;
 80032c0:	9713      	str	r7, [sp, #76]	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80032c2:	9614      	str	r6, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80032c4:	f7fd fd12 	bl	8000cec <HAL_ADC_ConfigChannel>
 80032c8:	b100      	cbz	r0, 80032cc <main+0x220>
 80032ca:	e7fe      	b.n	80032ca <main+0x21e>
  htim1.Instance = TIM1;
 80032cc:	4c26      	ldr	r4, [pc, #152]	; (8003368 <main+0x2bc>)
  htim1.Init.Prescaler = 10;
 80032ce:	4927      	ldr	r1, [pc, #156]	; (800336c <main+0x2c0>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032d0:	60a0      	str	r0, [r4, #8]
  htim1.Init.Prescaler = 10;
 80032d2:	230a      	movs	r3, #10
 80032d4:	e884 000a 	stmia.w	r4, {r1, r3}
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032d8:	6120      	str	r0, [r4, #16]
  htim1.Init.Period = 0xff;
 80032da:	23ff      	movs	r3, #255	; 0xff
  htim1.Init.RepetitionCounter = 0;
 80032dc:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032de:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80032e0:	4620      	mov	r0, r4
  htim1.Init.Period = 0xff;
 80032e2:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80032e4:	f7fe fe68 	bl	8001fb8 <HAL_TIM_Base_Init>
 80032e8:	4626      	mov	r6, r4
 80032ea:	b100      	cbz	r0, 80032ee <main+0x242>
 80032ec:	e7fe      	b.n	80032ec <main+0x240>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032ee:	a91e      	add	r1, sp, #120	; 0x78
 80032f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032f4:	f841 3d58 	str.w	r3, [r1, #-88]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80032f8:	4620      	mov	r0, r4
 80032fa:	f7fe ffd3 	bl	80022a4 <HAL_TIM_ConfigClockSource>
 80032fe:	b100      	cbz	r0, 8003302 <main+0x256>
 8003300:	e7fe      	b.n	8003300 <main+0x254>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003302:	4620      	mov	r0, r4
 8003304:	f7fe fe72 	bl	8001fec <HAL_TIM_PWM_Init>
 8003308:	b100      	cbz	r0, 800330c <main+0x260>
 800330a:	e7fe      	b.n	800330a <main+0x25e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800330c:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800330e:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003310:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003312:	a905      	add	r1, sp, #20
 8003314:	4620      	mov	r0, r4
 8003316:	f7ff f96f 	bl	80025f8 <HAL_TIMEx_MasterConfigSynchronization>
 800331a:	b100      	cbz	r0, 800331e <main+0x272>
 800331c:	e7fe      	b.n	800331c <main+0x270>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800331e:	2360      	movs	r3, #96	; 0x60
 8003320:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.Pulse = 0x7f;
 8003322:	237f      	movs	r3, #127	; 0x7f
 8003324:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003326:	2208      	movs	r2, #8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003328:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800332a:	a90c      	add	r1, sp, #48	; 0x30
 800332c:	480e      	ldr	r0, [pc, #56]	; (8003368 <main+0x2bc>)
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800332e:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003330:	930f      	str	r3, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003332:	9310      	str	r3, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003334:	9311      	str	r3, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003336:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003338:	f7ff f8d6 	bl	80024e8 <HAL_TIM_PWM_ConfigChannel>
 800333c:	b1d0      	cbz	r0, 8003374 <main+0x2c8>
 800333e:	e7fe      	b.n	800333e <main+0x292>
 8003340:	40021000 	.word	0x40021000
 8003344:	48000400 	.word	0x48000400
 8003348:	10110000 	.word	0x10110000
 800334c:	20000638 	.word	0x20000638
 8003350:	40004400 	.word	0x40004400
 8003354:	200005f8 	.word	0x200005f8
 8003358:	2000046c 	.word	0x2000046c
 800335c:	4001003c 	.word	0x4001003c
 8003360:	200004a0 	.word	0x200004a0
 8003364:	50000100 	.word	0x50000100
 8003368:	20000544 	.word	0x20000544
 800336c:	40012c00 	.word	0x40012c00
 8003370:	10210000 	.word	0x10210000
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003378:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800337a:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800337c:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.DeadTime = 0;
 800337e:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003380:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003382:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003384:	9019      	str	r0, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003386:	901a      	str	r0, [sp, #104]	; 0x68
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003388:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  sBreakDeadTimeConfig.Break2Filter = 0;
 800338c:	901c      	str	r0, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800338e:	901d      	str	r0, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003390:	a913      	add	r1, sp, #76	; 0x4c
 8003392:	481c      	ldr	r0, [pc, #112]	; (8003404 <main+0x358>)
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003394:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003396:	f7ff f951 	bl	800263c <HAL_TIMEx_ConfigBreakDeadTime>
 800339a:	4607      	mov	r7, r0
 800339c:	b100      	cbz	r0, 80033a0 <main+0x2f4>
 800339e:	e7fe      	b.n	800339e <main+0x2f2>
  HAL_TIM_MspPostInit(&htim1);
 80033a0:	4818      	ldr	r0, [pc, #96]	; (8003404 <main+0x358>)
  htim7.Instance = TIM7;
 80033a2:	4c19      	ldr	r4, [pc, #100]	; (8003408 <main+0x35c>)
  HAL_TIM_MspPostInit(&htim1);
 80033a4:	f000 f90a 	bl	80035bc <HAL_TIM_MspPostInit>
  htim7.Init.Prescaler = 1;
 80033a8:	4a18      	ldr	r2, [pc, #96]	; (800340c <main+0x360>)
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033aa:	60a7      	str	r7, [r4, #8]
  htim7.Init.Prescaler = 1;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e884 000c 	stmia.w	r4, {r2, r3}
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80033b2:	4620      	mov	r0, r4
  htim7.Init.Period = 35999;
 80033b4:	f648 439f 	movw	r3, #35999	; 0x8c9f
 80033b8:	60e3      	str	r3, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ba:	61a7      	str	r7, [r4, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80033bc:	f7fe fdfc 	bl	8001fb8 <HAL_TIM_Base_Init>
 80033c0:	b100      	cbz	r0, 80033c4 <main+0x318>
 80033c2:	e7fe      	b.n	80033c2 <main+0x316>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033c4:	9013      	str	r0, [sp, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033c6:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80033c8:	a913      	add	r1, sp, #76	; 0x4c
 80033ca:	4620      	mov	r0, r4
 80033cc:	f7ff f914 	bl	80025f8 <HAL_TIMEx_MasterConfigSynchronization>
 80033d0:	b100      	cbz	r0, 80033d4 <main+0x328>
 80033d2:	e7fe      	b.n	80033d2 <main+0x326>
	}

}

static void MX_DRIVER_Init(void){
	hdriver1.htim_pwm = &htim1;
 80033d4:	480e      	ldr	r0, [pc, #56]	; (8003410 <main+0x364>)
	hdriver1.pwm_ch = TIM_CHANNEL_3;
 80033d6:	2308      	movs	r3, #8
 80033d8:	6083      	str	r3, [r0, #8]
	hdriver1.htim_pid = &htim7;
	hdriver1.encoder = &hencoder1;
	hdriver1.pid_inner.Kp = 0.1;
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <main+0x368>)
 80033dc:	64c3      	str	r3, [r0, #76]	; 0x4c
	hdriver1.pid_inner.Ki = 0.001;
 80033de:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <main+0x36c>)
	hdriver1.htim_pid = &htim7;
 80033e0:	6044      	str	r4, [r0, #4]
	hdriver1.pid_inner.Ki = 0.001;
 80033e2:	6503      	str	r3, [r0, #80]	; 0x50
	hdriver1.encoder = &hencoder1;
 80033e4:	4c0d      	ldr	r4, [pc, #52]	; (800341c <main+0x370>)
	hdriver1.pid_outer.Kp = 0.08;
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <main+0x374>)
	hdriver1.htim_pwm = &htim1;
 80033e8:	6006      	str	r6, [r0, #0]
	hdriver1.encoder = &hencoder1;
 80033ea:	60c4      	str	r4, [r0, #12]
	hdriver1.pid_outer.Kp = 0.08;
 80033ec:	6283      	str	r3, [r0, #40]	; 0x28
	//hdriver1.pid.Ki = 1;
	if(HAL_DRIVER_Init(&hdriver1) != HAL_OK) {
 80033ee:	f7ff fc18 	bl	8002c22 <HAL_DRIVER_Init>
 80033f2:	b100      	cbz	r0, 80033f6 <main+0x34a>
 80033f4:	e7fe      	b.n	80033f4 <main+0x348>
	hencoder1.True_index_offset = 94;
 80033f6:	235e      	movs	r3, #94	; 0x5e
	if(HAL_ENC_Init(&hencoder1) != HAL_OK) {
 80033f8:	4620      	mov	r0, r4
	hencoder1.Instance = &htim2;
 80033fa:	6025      	str	r5, [r4, #0]
	hencoder1.True_index_offset = 94;
 80033fc:	80e3      	strh	r3, [r4, #6]
	if(HAL_ENC_Init(&hencoder1) != HAL_OK) {
 80033fe:	f7ff fdd5 	bl	8002fac <HAL_ENC_Init>
 8003402:	e7fe      	b.n	8003402 <main+0x356>
 8003404:	20000544 	.word	0x20000544
 8003408:	200006a8 	.word	0x200006a8
 800340c:	40001400 	.word	0x40001400
 8003410:	20000584 	.word	0x20000584
 8003414:	3dcccccd 	.word	0x3dcccccd
 8003418:	3a83126f 	.word	0x3a83126f
 800341c:	20000538 	.word	0x20000538
 8003420:	3da3d70a 	.word	0x3da3d70a

08003424 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003424:	e7fe      	b.n	8003424 <_Error_Handler>
	...

08003428 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003428:	4b21      	ldr	r3, [pc, #132]	; (80034b0 <HAL_MspInit+0x88>)
{
 800342a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	619a      	str	r2, [r3, #24]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	f002 0201 	and.w	r2, r2, #1
 800343a:	9200      	str	r2, [sp, #0]
 800343c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003444:	61da      	str	r2, [r3, #28]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800344e:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003450:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003452:	f7fd fdcb 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003456:	2200      	movs	r2, #0
 8003458:	4611      	mov	r1, r2
 800345a:	f06f 000b 	mvn.w	r0, #11
 800345e:	f7fd fdd7 	bl	8001010 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003462:	2200      	movs	r2, #0
 8003464:	4611      	mov	r1, r2
 8003466:	f06f 000a 	mvn.w	r0, #10
 800346a:	f7fd fdd1 	bl	8001010 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800346e:	2200      	movs	r2, #0
 8003470:	4611      	mov	r1, r2
 8003472:	f06f 0009 	mvn.w	r0, #9
 8003476:	f7fd fdcb 	bl	8001010 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800347a:	2200      	movs	r2, #0
 800347c:	4611      	mov	r1, r2
 800347e:	f06f 0004 	mvn.w	r0, #4
 8003482:	f7fd fdc5 	bl	8001010 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003486:	2200      	movs	r2, #0
 8003488:	4611      	mov	r1, r2
 800348a:	f06f 0003 	mvn.w	r0, #3
 800348e:	f7fd fdbf 	bl	8001010 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003492:	2200      	movs	r2, #0
 8003494:	4611      	mov	r1, r2
 8003496:	f06f 0001 	mvn.w	r0, #1
 800349a:	f7fd fdb9 	bl	8001010 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800349e:	2200      	movs	r2, #0
 80034a0:	4611      	mov	r1, r2
 80034a2:	f04f 30ff 	mov.w	r0, #4294967295
 80034a6:	f7fd fdb3 	bl	8001010 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034aa:	b003      	add	sp, #12
 80034ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80034b0:	40021000 	.word	0x40021000

080034b4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{

  if(hadc->Instance==ADC2)
 80034b4:	6802      	ldr	r2, [r0, #0]
 80034b6:	4b08      	ldr	r3, [pc, #32]	; (80034d8 <HAL_ADC_MspInit+0x24>)
 80034b8:	429a      	cmp	r2, r3
{
 80034ba:	b082      	sub	sp, #8
  if(hadc->Instance==ADC2)
 80034bc:	d109      	bne.n	80034d2 <HAL_ADC_MspInit+0x1e>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80034be:	4b07      	ldr	r3, [pc, #28]	; (80034dc <HAL_ADC_MspInit+0x28>)
 80034c0:	695a      	ldr	r2, [r3, #20]
 80034c2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034c6:	615a      	str	r2, [r3, #20]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80034d2:	b002      	add	sp, #8
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	50000100 	.word	0x50000100
 80034dc:	40021000 	.word	0x40021000

080034e0 <HAL_OPAMP_MspInit>:
  }

}

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 80034e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hopamp->Instance==OPAMP2)
 80034e2:	6802      	ldr	r2, [r0, #0]
 80034e4:	4b08      	ldr	r3, [pc, #32]	; (8003508 <HAL_OPAMP_MspInit+0x28>)
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d10a      	bne.n	8003500 <HAL_OPAMP_MspInit+0x20>
  
    /**OPAMP2 GPIO Configuration    
    PA6     ------> OPAMP2_VOUT
    PA7     ------> OPAMP2_VINP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80034ea:	23c0      	movs	r3, #192	; 0xc0
 80034ec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ee:	2303      	movs	r3, #3
 80034f0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f2:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f4:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fc:	f7fd fe90 	bl	8001220 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }

}
 8003500:	b007      	add	sp, #28
 8003502:	f85d fb04 	ldr.w	pc, [sp], #4
 8003506:	bf00      	nop
 8003508:	4001003c 	.word	0x4001003c

0800350c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800350c:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM1)
 800350e:	6803      	ldr	r3, [r0, #0]
 8003510:	4a12      	ldr	r2, [pc, #72]	; (800355c <HAL_TIM_Base_MspInit+0x50>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10c      	bne.n	8003530 <HAL_TIM_Base_MspInit+0x24>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003516:	4b12      	ldr	r3, [pc, #72]	; (8003560 <HAL_TIM_Base_MspInit+0x54>)
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800351e:	619a      	str	r2, [r3, #24]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003526:	9300      	str	r3, [sp, #0]
 8003528:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800352a:	b003      	add	sp, #12
 800352c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(htim_base->Instance==TIM7)
 8003530:	4a0c      	ldr	r2, [pc, #48]	; (8003564 <HAL_TIM_Base_MspInit+0x58>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d1f9      	bne.n	800352a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003536:	4b0a      	ldr	r3, [pc, #40]	; (8003560 <HAL_TIM_Base_MspInit+0x54>)
 8003538:	69da      	ldr	r2, [r3, #28]
 800353a:	f042 0220 	orr.w	r2, r2, #32
 800353e:	61da      	str	r2, [r3, #28]
 8003540:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8003542:	2200      	movs	r2, #0
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 800354a:	4611      	mov	r1, r2
 800354c:	2037      	movs	r0, #55	; 0x37
    __HAL_RCC_TIM7_CLK_ENABLE();
 800354e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8003550:	f7fd fd5e 	bl	8001010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 8003554:	2037      	movs	r0, #55	; 0x37
 8003556:	f7fd fd8f 	bl	8001078 <HAL_NVIC_EnableIRQ>
}
 800355a:	e7e6      	b.n	800352a <HAL_TIM_Base_MspInit+0x1e>
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40021000 	.word	0x40021000
 8003564:	40001400 	.word	0x40001400

08003568 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003568:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_encoder->Instance==TIM2)
 800356a:	6803      	ldr	r3, [r0, #0]
 800356c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8003570:	b086      	sub	sp, #24
  if(htim_encoder->Instance==TIM2)
 8003572:	d120      	bne.n	80035b6 <HAL_TIM_Encoder_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003574:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2400      	movs	r4, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800357a:	69da      	ldr	r2, [r3, #28]
 800357c:	f042 0201 	orr.w	r2, r2, #1
 8003580:	61da      	str	r2, [r3, #28]
 8003582:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003584:	9403      	str	r4, [sp, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800358e:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003590:	2303      	movs	r3, #3
 8003592:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003594:	2302      	movs	r3, #2
 8003596:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003598:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800359a:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800359c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80035a0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a2:	f7fd fe3d 	bl	8001220 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80035a6:	201c      	movs	r0, #28
 80035a8:	4622      	mov	r2, r4
 80035aa:	4621      	mov	r1, r4
 80035ac:	f7fd fd30 	bl	8001010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035b0:	201c      	movs	r0, #28
 80035b2:	f7fd fd61 	bl	8001078 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80035b6:	b006      	add	sp, #24
 80035b8:	bd10      	pop	{r4, pc}
	...

080035bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035bc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 80035be:	6802      	ldr	r2, [r0, #0]
 80035c0:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <HAL_TIM_MspPostInit+0x44>)
 80035c2:	429a      	cmp	r2, r3
{
 80035c4:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 80035c6:	d118      	bne.n	80035fa <HAL_TIM_MspPostInit+0x3e>
    PF0 / OSC_IN     ------> TIM1_CH3N
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = DRV_PWM_CH3N_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c8:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = DRV_PWM_CH3N_Pin;
 80035ca:	2301      	movs	r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035cc:	2602      	movs	r6, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80035ce:	2506      	movs	r5, #6
    HAL_GPIO_Init(DRV_PWM_CH3N_GPIO_Port, &GPIO_InitStruct);
 80035d0:	a901      	add	r1, sp, #4
 80035d2:	480c      	ldr	r0, [pc, #48]	; (8003604 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = DRV_PWM_CH3N_Pin;
 80035d4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035d6:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035d8:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035da:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80035dc:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(DRV_PWM_CH3N_GPIO_Port, &GPIO_InitStruct);
 80035de:	f7fd fe1f 	bl	8001220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DRV_PWM_CH3_Pin;
 80035e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
    HAL_GPIO_Init(DRV_PWM_CH3_GPIO_Port, &GPIO_InitStruct);
 80035e6:	a901      	add	r1, sp, #4
 80035e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = DRV_PWM_CH3_Pin;
 80035ec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f0:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035f2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80035f4:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(DRV_PWM_CH3_GPIO_Port, &GPIO_InitStruct);
 80035f6:	f7fd fe13 	bl	8001220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80035fa:	b006      	add	sp, #24
 80035fc:	bd70      	pop	{r4, r5, r6, pc}
 80035fe:	bf00      	nop
 8003600:	40012c00 	.word	0x40012c00
 8003604:	48001400 	.word	0x48001400

08003608 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003608:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 800360a:	6802      	ldr	r2, [r0, #0]
 800360c:	4b2b      	ldr	r3, [pc, #172]	; (80036bc <HAL_UART_MspInit+0xb4>)
 800360e:	429a      	cmp	r2, r3
{
 8003610:	b086      	sub	sp, #24
 8003612:	4606      	mov	r6, r0
  if(huart->Instance==USART2)
 8003614:	d14f      	bne.n	80036b6 <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003616:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361a:	2500      	movs	r5, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 800361c:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800361e:	4c28      	ldr	r4, [pc, #160]	; (80036c0 <HAL_UART_MspInit+0xb8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003620:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003624:	61da      	str	r2, [r3, #28]
 8003626:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	9503      	str	r5, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8003632:	230c      	movs	r3, #12
 8003634:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003636:	2302      	movs	r3, #2
 8003638:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800363a:	2303      	movs	r3, #3
 800363c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800363e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003640:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003642:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003646:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003648:	f7fd fdea 	bl	8001220 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800364c:	491d      	ldr	r1, [pc, #116]	; (80036c4 <HAL_UART_MspInit+0xbc>)
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800364e:	60a5      	str	r5, [r4, #8]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003650:	2310      	movs	r3, #16
 8003652:	e884 000a 	stmia.w	r4, {r1, r3}
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003656:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800365c:	6125      	str	r5, [r4, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800365e:	6165      	str	r5, [r4, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003660:	61a5      	str	r5, [r4, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003662:	61e5      	str	r5, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003664:	f7fd fd3c 	bl	80010e0 <HAL_DMA_Init>
 8003668:	b120      	cbz	r0, 8003674 <HAL_UART_MspInit+0x6c>
    {
      _Error_Handler(__FILE__, __LINE__);
 800366a:	f240 1167 	movw	r1, #359	; 0x167
 800366e:	4816      	ldr	r0, [pc, #88]	; (80036c8 <HAL_UART_MspInit+0xc0>)
 8003670:	f7ff fed8 	bl	8003424 <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003674:	6634      	str	r4, [r6, #96]	; 0x60
 8003676:	6266      	str	r6, [r4, #36]	; 0x24

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003678:	4c14      	ldr	r4, [pc, #80]	; (80036cc <HAL_UART_MspInit+0xc4>)
 800367a:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <HAL_UART_MspInit+0xc8>)
 800367c:	6023      	str	r3, [r4, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800367e:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003680:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003682:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003684:	6063      	str	r3, [r4, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003686:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003688:	60e2      	str	r2, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800368a:	6123      	str	r3, [r4, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800368c:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800368e:	61a3      	str	r3, [r4, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003690:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003692:	f7fd fd25 	bl	80010e0 <HAL_DMA_Init>
 8003696:	b120      	cbz	r0, 80036a2 <HAL_UART_MspInit+0x9a>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003698:	f240 1177 	movw	r1, #375	; 0x177
 800369c:	480a      	ldr	r0, [pc, #40]	; (80036c8 <HAL_UART_MspInit+0xc0>)
 800369e:	f7ff fec1 	bl	8003424 <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036a2:	2200      	movs	r2, #0
 80036a4:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80036a6:	6674      	str	r4, [r6, #100]	; 0x64
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036a8:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80036aa:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80036ac:	f7fd fcb0 	bl	8001010 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80036b0:	2026      	movs	r0, #38	; 0x26
 80036b2:	f7fd fce1 	bl	8001078 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80036b6:	b006      	add	sp, #24
 80036b8:	bd70      	pop	{r4, r5, r6, pc}
 80036ba:	bf00      	nop
 80036bc:	40004400 	.word	0x40004400
 80036c0:	200004f4 	.word	0x200004f4
 80036c4:	40020080 	.word	0x40020080
 80036c8:	08003928 	.word	0x08003928
 80036cc:	20000428 	.word	0x20000428
 80036d0:	4002006c 	.word	0x4002006c

080036d4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80036d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036d6:	f7fd f9c7 	bl	8000a68 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 80036de:	f7fd bcfa 	b.w	80010d6 <HAL_SYSTICK_IRQHandler>

080036e2 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80036e2:	2002      	movs	r0, #2
 80036e4:	f7fd be5c 	b.w	80013a0 <HAL_GPIO_EXTI_IRQHandler>

080036e8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80036e8:	2010      	movs	r0, #16
 80036ea:	f7fd be59 	b.w	80013a0 <HAL_GPIO_EXTI_IRQHandler>
	...

080036f0 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80036f0:	4801      	ldr	r0, [pc, #4]	; (80036f8 <DMA1_Channel6_IRQHandler+0x8>)
 80036f2:	f7fd bd4d 	b.w	8001190 <HAL_DMA_IRQHandler>
 80036f6:	bf00      	nop
 80036f8:	20000428 	.word	0x20000428

080036fc <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80036fc:	4801      	ldr	r0, [pc, #4]	; (8003704 <DMA1_Channel7_IRQHandler+0x8>)
 80036fe:	f7fd bd47 	b.w	8001190 <HAL_DMA_IRQHandler>
 8003702:	bf00      	nop
 8003704:	200004f4 	.word	0x200004f4

08003708 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8003708:	f44f 7080 	mov.w	r0, #256	; 0x100
 800370c:	f7fd be48 	b.w	80013a0 <HAL_GPIO_EXTI_IRQHandler>

08003710 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003710:	4801      	ldr	r0, [pc, #4]	; (8003718 <TIM2_IRQHandler+0x8>)
 8003712:	f7fe bb56 	b.w	8001dc2 <HAL_TIM_IRQHandler>
 8003716:	bf00      	nop
 8003718:	200005f8 	.word	0x200005f8

0800371c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800371c:	4801      	ldr	r0, [pc, #4]	; (8003724 <USART2_IRQHandler+0x8>)
 800371e:	f7ff b9e9 	b.w	8002af4 <HAL_UART_IRQHandler>
 8003722:	bf00      	nop
 8003724:	20000638 	.word	0x20000638

08003728 <TIM7_DAC2_IRQHandler>:
void TIM7_DAC2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003728:	4801      	ldr	r0, [pc, #4]	; (8003730 <TIM7_DAC2_IRQHandler+0x8>)
 800372a:	f7fe bb4a 	b.w	8001dc2 <HAL_TIM_IRQHandler>
 800372e:	bf00      	nop
 8003730:	200006a8 	.word	0x200006a8

08003734 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* Prevent unused argument(s) compilation warning */
	if(htim == &htim7){
 8003734:	4b03      	ldr	r3, [pc, #12]	; (8003744 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003736:	4283      	cmp	r3, r0
 8003738:	d102      	bne.n	8003740 <HAL_TIM_PeriodElapsedCallback+0xc>
		HAL_DRIVER_Update_PID(&hdriver1);
 800373a:	4803      	ldr	r0, [pc, #12]	; (8003748 <HAL_TIM_PeriodElapsedCallback+0x14>)
 800373c:	f7ff bb10 	b.w	8002d60 <HAL_DRIVER_Update_PID>
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	200006a8 	.word	0x200006a8
 8003748:	20000584 	.word	0x20000584

0800374c <HAL_GPIO_EXTI_Callback>:
#endif

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  /* Prevent unused argument(s) compilation warning */
  if(GPIO_Pin == TUNE_Pin){
 800374c:	2810      	cmp	r0, #16
 800374e:	d107      	bne.n	8003760 <HAL_GPIO_EXTI_Callback+0x14>
	  if(hdriver1.State == HAL_DRIVER_STATE_READY){
 8003750:	480c      	ldr	r0, [pc, #48]	; (8003784 <HAL_GPIO_EXTI_Callback+0x38>)
 8003752:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8003756:	2b01      	cmp	r3, #1
 8003758:	d112      	bne.n	8003780 <HAL_GPIO_EXTI_Callback+0x34>
		  HAL_DRIVER_Start_PID(&hdriver1, 2);
 800375a:	2102      	movs	r1, #2
 800375c:	f7ff ba80 	b.w	8002c60 <HAL_DRIVER_Start_PID>

	  }
  }
  if(GPIO_Pin == BREW_BTN_Pin){
 8003760:	2802      	cmp	r0, #2
 8003762:	d107      	bne.n	8003774 <HAL_GPIO_EXTI_Callback+0x28>
	  if(hdriver1.State == HAL_DRIVER_STATE_READY){
 8003764:	4807      	ldr	r0, [pc, #28]	; (8003784 <HAL_GPIO_EXTI_Callback+0x38>)
 8003766:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800376a:	2b01      	cmp	r3, #1
 800376c:	d108      	bne.n	8003780 <HAL_GPIO_EXTI_Callback+0x34>
		  HAL_DRIVER_Dispense(&hdriver1, 8);
 800376e:	2108      	movs	r1, #8
 8003770:	f7ff bac6 	b.w	8002d00 <HAL_DRIVER_Dispense>
	  }
  }

  if(GPIO_Pin == ENC_I_Pin){
 8003774:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8003778:	d102      	bne.n	8003780 <HAL_GPIO_EXTI_Callback+0x34>
		  HAL_ENC_Index_Callback(&hencoder1);
 800377a:	4803      	ldr	r0, [pc, #12]	; (8003788 <HAL_GPIO_EXTI_Callback+0x3c>)
 800377c:	f7ff bc38 	b.w	8002ff0 <HAL_ENC_Index_Callback>
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000584 	.word	0x20000584
 8003788:	20000538 	.word	0x20000538

0800378c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800378c:	4915      	ldr	r1, [pc, #84]	; (80037e4 <SystemInit+0x58>)
 800378e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003792:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800379a:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <SystemInit+0x5c>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80037a4:	6858      	ldr	r0, [r3, #4]
 80037a6:	4a11      	ldr	r2, [pc, #68]	; (80037ec <SystemInit+0x60>)
 80037a8:	4002      	ands	r2, r0
 80037aa:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80037b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037b6:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037be:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80037c6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80037c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ca:	f022 020f 	bic.w	r2, r2, #15
 80037ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80037d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80037d2:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <SystemInit+0x64>)
 80037d4:	4002      	ands	r2, r0
 80037d6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037e0:	608b      	str	r3, [r1, #8]
 80037e2:	4770      	bx	lr
 80037e4:	e000ed00 	.word	0xe000ed00
 80037e8:	40021000 	.word	0x40021000
 80037ec:	f87fc00c 	.word	0xf87fc00c
 80037f0:	ff00fccc 	.word	0xff00fccc

080037f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800382c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80037f8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80037fa:	e003      	b.n	8003804 <LoopCopyDataInit>

080037fc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80037fe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003800:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003802:	3104      	adds	r1, #4

08003804 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003804:	480b      	ldr	r0, [pc, #44]	; (8003834 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003806:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003808:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800380a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800380c:	d3f6      	bcc.n	80037fc <CopyDataInit>
	ldr	r2, =_sbss
 800380e:	4a0b      	ldr	r2, [pc, #44]	; (800383c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003810:	e002      	b.n	8003818 <LoopFillZerobss>

08003812 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003812:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003814:	f842 3b04 	str.w	r3, [r2], #4

08003818 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <LoopForever+0x16>)
	cmp	r2, r3
 800381a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800381c:	d3f9      	bcc.n	8003812 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800381e:	f7ff ffb5 	bl	800378c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003822:	f000 f837 	bl	8003894 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003826:	f7ff fc41 	bl	80030ac <main>

0800382a <LoopForever>:

LoopForever:
    b LoopForever
 800382a:	e7fe      	b.n	800382a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800382c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003830:	08003964 	.word	0x08003964
	ldr	r0, =_sdata
 8003834:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003838:	20000408 	.word	0x20000408
	ldr	r2, =_sbss
 800383c:	20000408 	.word	0x20000408
	ldr	r3, = _ebss
 8003840:	200006e8 	.word	0x200006e8

08003844 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003844:	e7fe      	b.n	8003844 <ADC1_2_IRQHandler>
	...

08003848 <arm_pid_init_f32>:
 8003848:	edd0 6a08 	vldr	s13, [r0, #32]
 800384c:	edd0 7a06 	vldr	s15, [r0, #24]
 8003850:	ed90 7a07 	vldr	s14, [r0, #28]
 8003854:	edc0 6a02 	vstr	s13, [r0, #8]
 8003858:	ee37 7a87 	vadd.f32	s14, s15, s14
 800385c:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8003860:	eef1 7a67 	vneg.f32	s15, s15
 8003864:	ee37 7a26 	vadd.f32	s14, s14, s13
 8003868:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800386c:	ed80 7a00 	vstr	s14, [r0]
 8003870:	edc0 7a01 	vstr	s15, [r0, #4]
 8003874:	b161      	cbz	r1, 8003890 <arm_pid_init_f32+0x48>
 8003876:	2300      	movs	r3, #0
 8003878:	7303      	strb	r3, [r0, #12]
 800387a:	7343      	strb	r3, [r0, #13]
 800387c:	7383      	strb	r3, [r0, #14]
 800387e:	73c3      	strb	r3, [r0, #15]
 8003880:	7403      	strb	r3, [r0, #16]
 8003882:	7443      	strb	r3, [r0, #17]
 8003884:	7483      	strb	r3, [r0, #18]
 8003886:	74c3      	strb	r3, [r0, #19]
 8003888:	7503      	strb	r3, [r0, #20]
 800388a:	7543      	strb	r3, [r0, #21]
 800388c:	7583      	strb	r3, [r0, #22]
 800388e:	75c3      	strb	r3, [r0, #23]
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop

08003894 <__libc_init_array>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	4e0d      	ldr	r6, [pc, #52]	; (80038cc <__libc_init_array+0x38>)
 8003898:	4c0d      	ldr	r4, [pc, #52]	; (80038d0 <__libc_init_array+0x3c>)
 800389a:	1ba4      	subs	r4, r4, r6
 800389c:	10a4      	asrs	r4, r4, #2
 800389e:	2500      	movs	r5, #0
 80038a0:	42a5      	cmp	r5, r4
 80038a2:	d109      	bne.n	80038b8 <__libc_init_array+0x24>
 80038a4:	4e0b      	ldr	r6, [pc, #44]	; (80038d4 <__libc_init_array+0x40>)
 80038a6:	4c0c      	ldr	r4, [pc, #48]	; (80038d8 <__libc_init_array+0x44>)
 80038a8:	f000 f820 	bl	80038ec <_init>
 80038ac:	1ba4      	subs	r4, r4, r6
 80038ae:	10a4      	asrs	r4, r4, #2
 80038b0:	2500      	movs	r5, #0
 80038b2:	42a5      	cmp	r5, r4
 80038b4:	d105      	bne.n	80038c2 <__libc_init_array+0x2e>
 80038b6:	bd70      	pop	{r4, r5, r6, pc}
 80038b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038bc:	4798      	blx	r3
 80038be:	3501      	adds	r5, #1
 80038c0:	e7ee      	b.n	80038a0 <__libc_init_array+0xc>
 80038c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038c6:	4798      	blx	r3
 80038c8:	3501      	adds	r5, #1
 80038ca:	e7f2      	b.n	80038b2 <__libc_init_array+0x1e>
 80038cc:	0800395c 	.word	0x0800395c
 80038d0:	0800395c 	.word	0x0800395c
 80038d4:	0800395c 	.word	0x0800395c
 80038d8:	08003960 	.word	0x08003960

080038dc <memset>:
 80038dc:	4402      	add	r2, r0
 80038de:	4603      	mov	r3, r0
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d100      	bne.n	80038e6 <memset+0xa>
 80038e4:	4770      	bx	lr
 80038e6:	f803 1b01 	strb.w	r1, [r3], #1
 80038ea:	e7f9      	b.n	80038e0 <memset+0x4>

080038ec <_init>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr

080038f8 <_fini>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	bf00      	nop
 80038fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fe:	bc08      	pop	{r3}
 8003900:	469e      	mov	lr, r3
 8003902:	4770      	bx	lr
